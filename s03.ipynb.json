{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"s03.ipynb","provenance":[],"collapsed_sections":[]},"kernelspec":{"name":"python3","display_name":"Python 3"}},"cells":[{"cell_type":"markdown","metadata":{"id":"nCfQDSzAPU2N"},"source":["<p><img alt=\"Colaboratory logo\" height=\"140px\" src=\"https://upload.wikimedia.org/wikipedia/commons/archive/f/fb/20161010213812%21Escudo-UdeA.svg\" align=\"left\" hspace=\"10px\" vspace=\"0px\"></p>\n","\n","<h1> Diplomado de Análisis de datos y Machine Learning en Python</h1>\n","\n","\n","El presente diplomado hace parte del centro de Big Data de la facultad de ciencias exactas y naturales (FCEN) de la Universidad de Antioquia."]},{"cell_type":"markdown","metadata":{"id":"X62hXhQfPh-M"},"source":["<p><a name=\"contents\"></a></p>\n","\n","# Contenido Sesión 3\n","\n","- <a href=\"#taller\">1. Taller</a><br>\n","- <a href=\"#manipulacionDatos\">2. Manipulación de datos</a><br>\n"," - <a href=\"#formateo\">2.1 Formateo de datos temporales</a><br>\n"," - <a href=\"#procesamientoNulos\">2.2 Procesamiento de datos nulos</a><br>\n"," - <a href=\"#indexacion\">2.3. Indexación y localización</a><br>\n"," - <a href=\"#organizacionDF\">2.4. Organización de dataframes</a><br>\n"," - <a href=\"#graficasPandas\">2.5. Graficando desde pandas</a><br>\n"," - <a href=\"#operacionesColFil\">2.6. Operaciones con columnas y filas</a><br>\n","  - <a href=\"#agrupacion\"> 2.7. Agrupando dataframes</a><br>\n","  - <a href=\"#renormalizacion\">2.8. Renormalización de datos</a><br>\n","  - <a href=\"#bineado\"> 2.9. Bineado de datos</a><br>\n","  - <a href=\"#concom\"> 2.10. Concatenación y combinación de dataframes</a><br>\n","- <a href=\"#tallpan\">3. Taller Pandas</a><br>\n","\n","\n","\n","\n"]},{"cell_type":"markdown","metadata":{"id":"sC6Fw0H0Ph75"},"source":["<p><a name=\"taller\"></a></p>\n","\n","# 1. Taller"]},{"cell_type":"markdown","metadata":{"id":"T6h3MM0NSf0-"},"source":["## Pregunta 1\n","\n","Definir una función max_de_dos(), que tome dos números como argumentos y devuelva el mayor de ellos. Si los números son iguales que imprima en pantalla \"Los números son iguales\" y no regrese ningún valor.\n"]},{"cell_type":"code","metadata":{"id":"76qFkocpSpP1"},"source":[""],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"aIbuEoqrcMSf"},"source":[""],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"JqkdxxVgSstd"},"source":["Para ver la solución haga double-click <b>aquí</b>.\n","<!--\n","\n","def max_de_dos(a, b):\n","  \n","  \n","  if a>b:\n","    output=a\n","  elif b>a:\n","    output=b\n","  else:\n","    print('Los números son iguales')\n","    output=None\n","  return output\n","  \n","\n","-->"]},{"cell_type":"markdown","metadata":{"id":"h9iOo3FkPh5P"},"source":["## Pregunta 2\n","\n","Escriba un código de python que imprima todos los números pares de una lista dada y que deje de mostrar números cuando se encuentre el número 237\n","\n","Lista de números de muestra:\n","\n","numbers = [\n","386, 462, 47, 418, 907, 344, 236, 375, 823, 566, 597, 978, 328, 615, 953, 345, 399, 162, 758, 219, 918, 237, 412, 566, 826, 248, 866, 950, 626, 949, 687, 217, 815, 67, 104, 58, 512, 24, 892, 894, 767, 553, 81, 379, 843, 831, 445, 742, 717, 958,743, 527 ]"]},{"cell_type":"code","metadata":{"id":"zkzfKIKRRf_X"},"source":[""],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"d5yYWl5fPh22"},"source":["Para ver la solución haga double-click <b>aquí</b>.\n","<!--\n","\n","numbers = [\n","386, 462, 47, 418, 907, 344, 236, 375, 823, 566, 597, 978, 328, 615, 953, 345, 399, 162, 758, 219, 918, 237, 412, 566, 826, 248, 866, 950, 626, 949, 687, 217, 815, 67, 104, 58, 512, 24, 892, 894, 767, 553, 81, 379, 843, 831, 445, 742, 717, 958,743, 527 ]\n","\n","listaFin=[]\n","for i in numbers:\n","  if (i%2==0):\n","      listaFin.append(i)\n","  if (i==237): \n","      break\n","print(listaFin)\n","\n","-->"]},{"cell_type":"markdown","metadata":{"id":"XBNbM5IwPh0I"},"source":["## Pregunta 3\n","\n","  * Mostrar con un while los números del 1 al 20\n","\n","  * Mostrar con un for los números del 1 al 20"]},{"cell_type":"code","metadata":{"id":"191hdVGrZiZo"},"source":["# Escriba aquí su código"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"G_prdXRjZeg-"},"source":["Para ver la solución haga double-click <b>aquí</b>.\n","<!--\n","\n","a=1\n","while a<=20: \n","  print(a)\n","  a+=1\n","\n","#####\n","\n","for a in range(1,21):\n","  print(a)\n","\n","-->"]},{"cell_type":"markdown","metadata":{"id":"B0pkMOrNPhuu"},"source":["## Pregunta 4\n","\n","Juguemos al juego de adivinar el numero, generaremos un número entre 1 y 20.\n","\n","Nuestro objetivo es adivinar el número. Si fallamos nos dirán si es mayor o menor que el número buscado. También poner el número de intentos requeridos."]},{"cell_type":"code","metadata":{"id":"3cbPgZUacTHW"},"source":["# Escriba aquí su código\n"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"iF-RogBsWL6A"},"source":["\n","\n","\n"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"MwxkJEBmPhsC"},"source":["Para ver la solución haga double-click <b>aquí</b>.\n","<!--\n","\n","def adivina_numero():\n","  \n","  import numpy as np  \n","  numero_buscado = np.random.randint(1, 21)\n"," \n","  encontrado = False\n","  intentos = 0\n","\n","  while not encontrado:\n","\n","      numero_usuario = int(input(\"Introduce el número buscado: \"))\n","\n","      if numero_usuario > numero_buscado:\n","          print(\"El número que buscas es menor\")\n","          intentos = intentos +1\n","      elif numero_usuario < numero_buscado:\n","          print(\"El numero que buscas es mayor\")\n","          intentos = intentos +1\n","      else:\n","          encontrado = True\n","          print(\"Has acertado el número correcto es \" , numero_usuario, \" te ha llevado \", intentos,\" intentos\")\n","\n","-->"]},{"cell_type":"markdown","metadata":{"id":"_KGV5fSPgFlW"},"source":["## Pregunta 5\n","\n","Defina una función llamada `es_cadena_no_vacia()` que evalúe si una cadena de caracteres es vacía o no y que retorne un variable booleana según sea el caso"]},{"cell_type":"code","metadata":{"id":"O3mAos9VkqQf"},"source":["# Escriba aquí su código\n"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"b-f_2ZSCUj2r"},"source":[""],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"DesQud5cgp89"},"source":["Para ver la solución haga double-click <b>aquí</b>.\n","<!--\n","\n","\n","        def es_cadena_no_vacia(cadena=None):\n","          if cadena==None:\n","            salida=False\n","          else:\n","            salida=True\n","          return salida\n","\n","-->"]},{"cell_type":"markdown","metadata":{"id":"IDW3cSxwgvUt"},"source":["## Pregunta 6\n","\n","Defina una función llamada `es_numero()` que evalúa si la entrada es un número y que retorne una variable booleana según sea el caso"]},{"cell_type":"code","metadata":{"id":"65TDiqKvkrdZ"},"source":["# Escriba aquí su código\n"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"GB1gWNbjnAiW"},"source":[""],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"C-KDI__6hFD9"},"source":["Para ver la solución haga double-click <b>aquí</b>.\n","<!--\n","\n","def es_numero(num=None):\n","  if type(num)==int or type(num)==float:\n","    salida=True\n","  else:\n","    salida=False\n","    \n","  return salida\n","\n","-->"]},{"cell_type":"markdown","metadata":{"id":"YCWHaLZQi1Dr"},"source":["## Pregunta 7\n","\n","Defina una clase llamada Hotel que contenga los atributos nombre, ubicación, puntaje obtenido por votación, y precio. Se tienen las siguientes restricciones:\n","\n","* El nombre y la ubicación deben ser cadenas no vacías. \n","* El puntaje debe ser un número (sin restricciones sobre su valor) \n","* El precio debe ser un número distinto de cero.\n","\n","si no se cumple alguna de las condiciones, ejecute un error que muestre en pantalla el problema.\n","\n","*Pista*: Use las funciónes `es_cadena_no_vacia()` y `es_numero()`\n","\n","\n"]},{"cell_type":"code","metadata":{"id":"kHT8B-fkktA7"},"source":["# Escriba aquí su código"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"ey_Ag-sHkvwt"},"source":["Para ver la solución haga double-click <b>aquí</b>.\n","<!--\n","\n","class Hotel(object):\n","    \"\"\" Hotel: sus atributos son: nombre, ubicacion, puntaje y precio.\"\"\"\n","\n","    def __init__(self, nombre = '*', ubicacion = '*',\n","                 puntaje = 0, precio = float(\"inf\")):\n","        \"\"\" nombre y ubicacion deben ser cadenas no vacías,\n","            puntaje y precio son números.\n","            Si el precio es 0 se reemplaza por infinito. \"\"\"\n","\n","        def es_cadena_no_vacia(cadena=None):\n","          if cadena==None:\n","            salida=False\n","          else:\n","            salida=True\n","          return salida\n","        \n","        def es_numero(num=None):\n","          if type(num)==int or type(num)==float:\n","            salida=True\n","          else:\n","            salida=False\n","\n","          return salida\n","        \n","        if es_cadena_no_vacia (nombre):\n","            self.nombre = nombre\n","        else:\n","            raise TypeError (\"El nombre debe ser una cadena no vacía\")\n","\n","        if es_cadena_no_vacia (ubicacion):\n","            self.ubicacion = ubicacion\n","        else:\n","            raise TypeError (\"La ubicación debe ser una cadena no vacía\")\n","\n","        if es_numero(puntaje):\n","            self.puntaje = puntaje\n","        else:\n","            raise TypeError (\"El puntaje debe ser un número\")\n","\n","        if es_numero(precio):\n","            if precio != 0:\n","                self.precio = precio\n","            else:\n","                self.precio = float(\"inf\")\n","        else:\n","            raise TypeError(\"El precio debe ser un número\")\n","\n","    def __str__(self):\n","        \"\"\" Muestra el hotel según lo requerido. \"\"\"\n","        return self.nombre + \" de \"+ self.ubicacion+ \\\n","                \" - Puntaje: \"+ str(self.puntaje) + \" - Precio: \"+ \\\n","                str(self.precio)+ \" pesos.\"\n","-->"]},{"cell_type":"markdown","metadata":{"id":"bcholMKi38Qz"},"source":["<p><a name=\"manipulacionDatos\"></a></p>\n","\n","# 2. Manipulación de datos"]},{"cell_type":"code","metadata":{"id":"cjdALyDr5fQu"},"source":["import pandas as pd\n","import numpy as np\n","\n","df=pd.read_csv(\"https://raw.githubusercontent.com/diplomado-bigdata-machinelearning-udea/Curso1/master/s03/dataVentas2009.csv\") "],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"uUV8ce9be4j3","executionInfo":{"status":"ok","timestamp":1631989319403,"user_tz":-120,"elapsed":113,"user":{"displayName":"MANUEL ALEJANDRO RODRIGUEZ GIRALDO","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"15792682869073318475"}},"outputId":"2a5bb02f-d596-4d3f-8607-eda100b3f3d5"},"source":["np.nan"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["nan"]},"metadata":{},"execution_count":10}]},{"cell_type":"code","metadata":{"id":"CFy5EutLf_7U","colab":{"base_uri":"https://localhost:8080/","height":362},"executionInfo":{"status":"ok","timestamp":1631989319403,"user_tz":-120,"elapsed":106,"user":{"displayName":"MANUEL ALEJANDRO RODRIGUEZ GIRALDO","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"15792682869073318475"}},"outputId":"ccf37f45-1a02-44a1-efc6-c0a76255e91f"},"source":["df.head(10)"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Fecha</th>\n","      <th>Producto1</th>\n","      <th>Producto2</th>\n","      <th>Producto3</th>\n","      <th>Producto4</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>01/01/2009</td>\n","      <td>29</td>\n","      <td>20</td>\n","      <td>35</td>\n","      <td>NaN</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>02/01/2009</td>\n","      <td>19</td>\n","      <td>3</td>\n","      <td>22</td>\n","      <td>NaN</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>03/01/2009</td>\n","      <td>24</td>\n","      <td>12</td>\n","      <td>22</td>\n","      <td>NaN</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>04/01/2009</td>\n","      <td>24</td>\n","      <td>8</td>\n","      <td>15</td>\n","      <td>NaN</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>05/01/2009</td>\n","      <td>120</td>\n","      <td>111</td>\n","      <td>141</td>\n","      <td>NaN</td>\n","    </tr>\n","    <tr>\n","      <th>5</th>\n","      <td>06/01/2009</td>\n","      <td>261</td>\n","      <td>146</td>\n","      <td>236</td>\n","      <td>NaN</td>\n","    </tr>\n","    <tr>\n","      <th>6</th>\n","      <td>07/01/2009</td>\n","      <td>60</td>\n","      <td>33</td>\n","      <td>80</td>\n","      <td>NaN</td>\n","    </tr>\n","    <tr>\n","      <th>7</th>\n","      <td>08/01/2009</td>\n","      <td>24</td>\n","      <td>14</td>\n","      <td>14</td>\n","      <td>NaN</td>\n","    </tr>\n","    <tr>\n","      <th>8</th>\n","      <td>09/01/2009</td>\n","      <td>35</td>\n","      <td>20</td>\n","      <td>32</td>\n","      <td>NaN</td>\n","    </tr>\n","    <tr>\n","      <th>9</th>\n","      <td>10/01/2009</td>\n","      <td>81</td>\n","      <td>45</td>\n","      <td>79</td>\n","      <td>NaN</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["        Fecha  Producto1  Producto2  Producto3  Producto4\n","0  01/01/2009         29         20         35        NaN\n","1  02/01/2009         19          3         22        NaN\n","2  03/01/2009         24         12         22        NaN\n","3  04/01/2009         24          8         15        NaN\n","4  05/01/2009        120        111        141        NaN\n","5  06/01/2009        261        146        236        NaN\n","6  07/01/2009         60         33         80        NaN\n","7  08/01/2009         24         14         14        NaN\n","8  09/01/2009         35         20         32        NaN\n","9  10/01/2009         81         45         79        NaN"]},"metadata":{},"execution_count":11}]},{"cell_type":"code","metadata":{"id":"8RKPq77HkBJs","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1631989319404,"user_tz":-120,"elapsed":104,"user":{"displayName":"MANUEL ALEJANDRO RODRIGUEZ GIRALDO","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"15792682869073318475"}},"outputId":"2ba40e6a-9525-4c51-8433-923856976c01"},"source":["df.columns"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["Index(['Fecha', 'Producto1', 'Producto2', 'Producto3', 'Producto4'], dtype='object')"]},"metadata":{},"execution_count":12}]},{"cell_type":"code","metadata":{"id":"-taPUR91kBVJ","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1631989319405,"user_tz":-120,"elapsed":94,"user":{"displayName":"MANUEL ALEJANDRO RODRIGUEZ GIRALDO","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"15792682869073318475"}},"outputId":"ff82d5b4-b135-4701-c27b-46198de5626f"},"source":["df.shape"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["(365, 5)"]},"metadata":{},"execution_count":13}]},{"cell_type":"code","metadata":{"id":"M1J0ucuGkBXy","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1631989319405,"user_tz":-120,"elapsed":83,"user":{"displayName":"MANUEL ALEJANDRO RODRIGUEZ GIRALDO","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"15792682869073318475"}},"outputId":"778191c6-a90d-4519-ab0a-678b1e908aa8"},"source":["df.info()"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["<class 'pandas.core.frame.DataFrame'>\n","RangeIndex: 365 entries, 0 to 364\n","Data columns (total 5 columns):\n"," #   Column     Non-Null Count  Dtype  \n","---  ------     --------------  -----  \n"," 0   Fecha      365 non-null    object \n"," 1   Producto1  365 non-null    int64  \n"," 2   Producto2  365 non-null    int64  \n"," 3   Producto3  365 non-null    int64  \n"," 4   Producto4  178 non-null    float64\n","dtypes: float64(1), int64(3), object(1)\n","memory usage: 14.4+ KB\n"]}]},{"cell_type":"code","metadata":{"id":"brvIm-PYySHc","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1631989319406,"user_tz":-120,"elapsed":76,"user":{"displayName":"MANUEL ALEJANDRO RODRIGUEZ GIRALDO","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"15792682869073318475"}},"outputId":"d8c01461-d837-4e9f-e482-26e7ef2edead"},"source":["l=df[\"Producto4\"].unique()\n","l"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([  nan, 2156., 4548., 7575., 7268., 2320., 5081., 4236., 3755.,\n","       6939., 4278., 5999., 3586., 4132., 7064., 6996., 4331., 6134.,\n","       4639., 4635., 2144., 5041., 7219., 7208., 5237., 5869., 1753.,\n","       7194., 5384., 7121., 5259., 5103., 5514., 3524., 4187., 4359.,\n","       7127., 6971., 6178., 5078., 4416., 5683., 5647., 6901., 4902.,\n","       3752., 4822., 4015., 5534., 7044., 6242., 6239., 5661., 1445.,\n","       3064., 5941., 7052., 6864., 5837., 4185., 4036., 4375., 6763.,\n","       6686., 6520., 6044., 5205., 3959., 4263., 4379., 4256., 3985.,\n","       2169., 2550., 2605., 3599., 1923., 2044., 3183., 2709., 2547.,\n","        656., 1415., 1342., 1799., 1588., 1906.,  705., 1116., 1773.,\n","       2211.,  984., 1967.,  663., 1003.,  825.,  924.,  870., 1373.,\n","       1311., 1238.,  919., 1006., 1483., 1374., 1442.,  633.,  952.,\n","        286.,  833., 1191., 1114., 1075., 1230.,  958.,  309.,  859.,\n","       1208.,  798., 1046.,  906.,  864.,  552., 1063., 1341., 1300.,\n","       1175., 1108., 1005.,  321.,  404.,    0.])"]},"metadata":{},"execution_count":15}]},{"cell_type":"code","metadata":{"id":"-M_F_TrGKmqK","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1631989319406,"user_tz":-120,"elapsed":71,"user":{"displayName":"MANUEL ALEJANDRO RODRIGUEZ GIRALDO","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"15792682869073318475"}},"outputId":"6a26a01e-8cf2-4173-b687-96e8ef3ab004"},"source":["df['Fecha']"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["0      01/01/2009\n","1      02/01/2009\n","2      03/01/2009\n","3      04/01/2009\n","4      05/01/2009\n","          ...    \n","360    27/12/2009\n","361    28/12/2009\n","362    29/12/2009\n","363    30/12/2009\n","364    31/12/2009\n","Name: Fecha, Length: 365, dtype: object"]},"metadata":{},"execution_count":16}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"AfsNmSQ8e_al","executionInfo":{"status":"ok","timestamp":1631989319407,"user_tz":-120,"elapsed":67,"user":{"displayName":"MANUEL ALEJANDRO RODRIGUEZ GIRALDO","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"15792682869073318475"}},"outputId":"42c72b39-8c53-4744-c3fc-9052dae8f578"},"source":["df.Fecha"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["0      01/01/2009\n","1      02/01/2009\n","2      03/01/2009\n","3      04/01/2009\n","4      05/01/2009\n","          ...    \n","360    27/12/2009\n","361    28/12/2009\n","362    29/12/2009\n","363    30/12/2009\n","364    31/12/2009\n","Name: Fecha, Length: 365, dtype: object"]},"metadata":{},"execution_count":17}]},{"cell_type":"markdown","metadata":{"id":"N0sYljD4K4UX"},"source":["<p><a name=\"formateo\"></a></p>\n","\n","## 2.1. Formateo de datos temporales"]},{"cell_type":"markdown","metadata":{"id":"HtYNEVV9LC-z"},"source":["La función `to_datetime` permite convertir los datos a un formato especial de tiempo"]},{"cell_type":"code","metadata":{"id":"5XzounFS_4zL","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1631989319408,"user_tz":-120,"elapsed":63,"user":{"displayName":"MANUEL ALEJANDRO RODRIGUEZ GIRALDO","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"15792682869073318475"}},"outputId":"f9f1af6c-7081-4ae0-bc10-8d32ffd2eb68"},"source":["pd.to_datetime(df.Fecha)"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["0     2009-01-01\n","1     2009-02-01\n","2     2009-03-01\n","3     2009-04-01\n","4     2009-05-01\n","         ...    \n","360   2009-12-27\n","361   2009-12-28\n","362   2009-12-29\n","363   2009-12-30\n","364   2009-12-31\n","Name: Fecha, Length: 365, dtype: datetime64[ns]"]},"metadata":{},"execution_count":18}]},{"cell_type":"code","metadata":{"id":"RRD46rmYLvcm"},"source":["df['Fecha'] = pd.to_datetime(df.Fecha, format='%d/%m/%Y')"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"ziiRiHT7ggtH","executionInfo":{"status":"ok","timestamp":1631989319409,"user_tz":-120,"elapsed":58,"user":{"displayName":"MANUEL ALEJANDRO RODRIGUEZ GIRALDO","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"15792682869073318475"}},"outputId":"460e6be0-6fe0-4cbf-8822-214601a1e4ae"},"source":["df.info()"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["<class 'pandas.core.frame.DataFrame'>\n","RangeIndex: 365 entries, 0 to 364\n","Data columns (total 5 columns):\n"," #   Column     Non-Null Count  Dtype         \n","---  ------     --------------  -----         \n"," 0   Fecha      365 non-null    datetime64[ns]\n"," 1   Producto1  365 non-null    int64         \n"," 2   Producto2  365 non-null    int64         \n"," 3   Producto3  365 non-null    int64         \n"," 4   Producto4  178 non-null    float64       \n","dtypes: datetime64[ns](1), float64(1), int64(3)\n","memory usage: 14.4 KB\n"]}]},{"cell_type":"code","metadata":{"id":"l2i3pwVcAaeP","colab":{"base_uri":"https://localhost:8080/","height":236},"executionInfo":{"status":"ok","timestamp":1631989319410,"user_tz":-120,"elapsed":54,"user":{"displayName":"MANUEL ALEJANDRO RODRIGUEZ GIRALDO","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"15792682869073318475"}},"outputId":"db4932ef-3c53-43d6-e8dd-34d0f91657e7"},"source":["#df.Fecha=pd.to_datetime(df.Fecha)\n","df.set_index('Fecha', inplace=True)\n","df.head()"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Producto1</th>\n","      <th>Producto2</th>\n","      <th>Producto3</th>\n","      <th>Producto4</th>\n","    </tr>\n","    <tr>\n","      <th>Fecha</th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>2009-01-01</th>\n","      <td>29</td>\n","      <td>20</td>\n","      <td>35</td>\n","      <td>NaN</td>\n","    </tr>\n","    <tr>\n","      <th>2009-01-02</th>\n","      <td>19</td>\n","      <td>3</td>\n","      <td>22</td>\n","      <td>NaN</td>\n","    </tr>\n","    <tr>\n","      <th>2009-01-03</th>\n","      <td>24</td>\n","      <td>12</td>\n","      <td>22</td>\n","      <td>NaN</td>\n","    </tr>\n","    <tr>\n","      <th>2009-01-04</th>\n","      <td>24</td>\n","      <td>8</td>\n","      <td>15</td>\n","      <td>NaN</td>\n","    </tr>\n","    <tr>\n","      <th>2009-01-05</th>\n","      <td>120</td>\n","      <td>111</td>\n","      <td>141</td>\n","      <td>NaN</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["            Producto1  Producto2  Producto3  Producto4\n","Fecha                                                 \n","2009-01-01         29         20         35        NaN\n","2009-01-02         19          3         22        NaN\n","2009-01-03         24         12         22        NaN\n","2009-01-04         24          8         15        NaN\n","2009-01-05        120        111        141        NaN"]},"metadata":{},"execution_count":21}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"1U9UGvrXhg_x","executionInfo":{"status":"ok","timestamp":1631989319411,"user_tz":-120,"elapsed":54,"user":{"displayName":"MANUEL ALEJANDRO RODRIGUEZ GIRALDO","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"15792682869073318475"}},"outputId":"dc4529ee-98fd-4774-bd70-331a63b29d6e"},"source":["df.info()"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["<class 'pandas.core.frame.DataFrame'>\n","DatetimeIndex: 365 entries, 2009-01-01 to 2009-12-31\n","Data columns (total 4 columns):\n"," #   Column     Non-Null Count  Dtype  \n","---  ------     --------------  -----  \n"," 0   Producto1  365 non-null    int64  \n"," 1   Producto2  365 non-null    int64  \n"," 2   Producto3  365 non-null    int64  \n"," 3   Producto4  178 non-null    float64\n","dtypes: float64(1), int64(3)\n","memory usage: 14.3 KB\n"]}]},{"cell_type":"markdown","metadata":{"id":"L5pKpKPmN8-3"},"source":["<p><a name=\"procesamientoNulos\"></a></p>\n","\n","## 2.2. Procesamiento de datos nulos"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":454},"id":"tV4wbhqmh50D","executionInfo":{"status":"ok","timestamp":1631989319413,"user_tz":-120,"elapsed":51,"user":{"displayName":"MANUEL ALEJANDRO RODRIGUEZ GIRALDO","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"15792682869073318475"}},"outputId":"c54fb370-4dc7-4b34-8e41-77f647745a0c"},"source":["df"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Producto1</th>\n","      <th>Producto2</th>\n","      <th>Producto3</th>\n","      <th>Producto4</th>\n","    </tr>\n","    <tr>\n","      <th>Fecha</th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>2009-01-01</th>\n","      <td>29</td>\n","      <td>20</td>\n","      <td>35</td>\n","      <td>NaN</td>\n","    </tr>\n","    <tr>\n","      <th>2009-01-02</th>\n","      <td>19</td>\n","      <td>3</td>\n","      <td>22</td>\n","      <td>NaN</td>\n","    </tr>\n","    <tr>\n","      <th>2009-01-03</th>\n","      <td>24</td>\n","      <td>12</td>\n","      <td>22</td>\n","      <td>NaN</td>\n","    </tr>\n","    <tr>\n","      <th>2009-01-04</th>\n","      <td>24</td>\n","      <td>8</td>\n","      <td>15</td>\n","      <td>NaN</td>\n","    </tr>\n","    <tr>\n","      <th>2009-01-05</th>\n","      <td>120</td>\n","      <td>111</td>\n","      <td>141</td>\n","      <td>NaN</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>2009-12-27</th>\n","      <td>66</td>\n","      <td>29</td>\n","      <td>52</td>\n","      <td>0.0</td>\n","    </tr>\n","    <tr>\n","      <th>2009-12-28</th>\n","      <td>61</td>\n","      <td>41</td>\n","      <td>99</td>\n","      <td>0.0</td>\n","    </tr>\n","    <tr>\n","      <th>2009-12-29</th>\n","      <td>89</td>\n","      <td>52</td>\n","      <td>115</td>\n","      <td>0.0</td>\n","    </tr>\n","    <tr>\n","      <th>2009-12-30</th>\n","      <td>76</td>\n","      <td>43</td>\n","      <td>115</td>\n","      <td>0.0</td>\n","    </tr>\n","    <tr>\n","      <th>2009-12-31</th>\n","      <td>53</td>\n","      <td>46</td>\n","      <td>112</td>\n","      <td>0.0</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>365 rows × 4 columns</p>\n","</div>"],"text/plain":["            Producto1  Producto2  Producto3  Producto4\n","Fecha                                                 \n","2009-01-01         29         20         35        NaN\n","2009-01-02         19          3         22        NaN\n","2009-01-03         24         12         22        NaN\n","2009-01-04         24          8         15        NaN\n","2009-01-05        120        111        141        NaN\n","...               ...        ...        ...        ...\n","2009-12-27         66         29         52        0.0\n","2009-12-28         61         41         99        0.0\n","2009-12-29         89         52        115        0.0\n","2009-12-30         76         43        115        0.0\n","2009-12-31         53         46        112        0.0\n","\n","[365 rows x 4 columns]"]},"metadata":{},"execution_count":23}]},{"cell_type":"code","metadata":{"id":"fQRvzVfuBKRS","colab":{"base_uri":"https://localhost:8080/","height":236},"executionInfo":{"status":"ok","timestamp":1631989319415,"user_tz":-120,"elapsed":52,"user":{"displayName":"MANUEL ALEJANDRO RODRIGUEZ GIRALDO","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"15792682869073318475"}},"outputId":"85bdf04d-d222-45b2-d6f3-b1922a438f5f"},"source":["df.isna().head()"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Producto1</th>\n","      <th>Producto2</th>\n","      <th>Producto3</th>\n","      <th>Producto4</th>\n","    </tr>\n","    <tr>\n","      <th>Fecha</th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>2009-01-01</th>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>True</td>\n","    </tr>\n","    <tr>\n","      <th>2009-01-02</th>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>True</td>\n","    </tr>\n","    <tr>\n","      <th>2009-01-03</th>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>True</td>\n","    </tr>\n","    <tr>\n","      <th>2009-01-04</th>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>True</td>\n","    </tr>\n","    <tr>\n","      <th>2009-01-05</th>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>True</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["            Producto1  Producto2  Producto3  Producto4\n","Fecha                                                 \n","2009-01-01      False      False      False       True\n","2009-01-02      False      False      False       True\n","2009-01-03      False      False      False       True\n","2009-01-04      False      False      False       True\n","2009-01-05      False      False      False       True"]},"metadata":{},"execution_count":24}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"vBVmit4FhkZo","executionInfo":{"status":"ok","timestamp":1631989319416,"user_tz":-120,"elapsed":52,"user":{"displayName":"MANUEL ALEJANDRO RODRIGUEZ GIRALDO","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"15792682869073318475"}},"outputId":"217b48ae-35d6-4bf5-b024-8122e0767b70"},"source":["df.info()"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["<class 'pandas.core.frame.DataFrame'>\n","DatetimeIndex: 365 entries, 2009-01-01 to 2009-12-31\n","Data columns (total 4 columns):\n"," #   Column     Non-Null Count  Dtype  \n","---  ------     --------------  -----  \n"," 0   Producto1  365 non-null    int64  \n"," 1   Producto2  365 non-null    int64  \n"," 2   Producto3  365 non-null    int64  \n"," 3   Producto4  178 non-null    float64\n","dtypes: float64(1), int64(3)\n","memory usage: 14.3 KB\n"]}]},{"cell_type":"code","metadata":{"id":"j3t4nAapM6Y3","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1631989319418,"user_tz":-120,"elapsed":46,"user":{"displayName":"MANUEL ALEJANDRO RODRIGUEZ GIRALDO","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"15792682869073318475"}},"outputId":"57a6aba3-6927-4ed9-d1b5-217fdbbc98fc"},"source":["df.isnull().sum()"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["Producto1      0\n","Producto2      0\n","Producto3      0\n","Producto4    187\n","dtype: int64"]},"metadata":{},"execution_count":26}]},{"cell_type":"markdown","metadata":{"id":"9q_xfpstLYS6"},"source":[" Es lo mismo que df.isnull, ver: https://datascience.stackexchange.com/questions/37878/difference-between-isna-and-isnull-in-pandas"]},{"cell_type":"markdown","metadata":{"id":"mvt0PKf1CpsC"},"source":["Usar el comando `fillna()` para reemplazar los valores nulos con el valor deseado. Puede hacerse en una sola columna `df.columna.fillna()` o en todas al mismo tiempo `df.fillna()` "]},{"cell_type":"code","metadata":{"id":"pu5d3XsZoJuJ","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1631989320622,"user_tz":-120,"elapsed":1241,"user":{"displayName":"MANUEL ALEJANDRO RODRIGUEZ GIRALDO","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"15792682869073318475"}},"outputId":"d8752f36-6b30-452e-eb39-490530e38674"},"source":["# Solo visual\n","df.Producto4.fillna(0)"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["Fecha\n","2009-01-01    0.0\n","2009-01-02    0.0\n","2009-01-03    0.0\n","2009-01-04    0.0\n","2009-01-05    0.0\n","             ... \n","2009-12-27    0.0\n","2009-12-28    0.0\n","2009-12-29    0.0\n","2009-12-30    0.0\n","2009-12-31    0.0\n","Name: Producto4, Length: 365, dtype: float64"]},"metadata":{},"execution_count":27}]},{"cell_type":"code","metadata":{"id":"x4atDg1leXrN","colab":{"base_uri":"https://localhost:8080/","height":454},"executionInfo":{"status":"ok","timestamp":1631989320622,"user_tz":-120,"elapsed":94,"user":{"displayName":"MANUEL ALEJANDRO RODRIGUEZ GIRALDO","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"15792682869073318475"}},"outputId":"6d06f1ee-d4d3-474a-dac3-0f34b6dcda4b"},"source":["df"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Producto1</th>\n","      <th>Producto2</th>\n","      <th>Producto3</th>\n","      <th>Producto4</th>\n","    </tr>\n","    <tr>\n","      <th>Fecha</th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>2009-01-01</th>\n","      <td>29</td>\n","      <td>20</td>\n","      <td>35</td>\n","      <td>NaN</td>\n","    </tr>\n","    <tr>\n","      <th>2009-01-02</th>\n","      <td>19</td>\n","      <td>3</td>\n","      <td>22</td>\n","      <td>NaN</td>\n","    </tr>\n","    <tr>\n","      <th>2009-01-03</th>\n","      <td>24</td>\n","      <td>12</td>\n","      <td>22</td>\n","      <td>NaN</td>\n","    </tr>\n","    <tr>\n","      <th>2009-01-04</th>\n","      <td>24</td>\n","      <td>8</td>\n","      <td>15</td>\n","      <td>NaN</td>\n","    </tr>\n","    <tr>\n","      <th>2009-01-05</th>\n","      <td>120</td>\n","      <td>111</td>\n","      <td>141</td>\n","      <td>NaN</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>2009-12-27</th>\n","      <td>66</td>\n","      <td>29</td>\n","      <td>52</td>\n","      <td>0.0</td>\n","    </tr>\n","    <tr>\n","      <th>2009-12-28</th>\n","      <td>61</td>\n","      <td>41</td>\n","      <td>99</td>\n","      <td>0.0</td>\n","    </tr>\n","    <tr>\n","      <th>2009-12-29</th>\n","      <td>89</td>\n","      <td>52</td>\n","      <td>115</td>\n","      <td>0.0</td>\n","    </tr>\n","    <tr>\n","      <th>2009-12-30</th>\n","      <td>76</td>\n","      <td>43</td>\n","      <td>115</td>\n","      <td>0.0</td>\n","    </tr>\n","    <tr>\n","      <th>2009-12-31</th>\n","      <td>53</td>\n","      <td>46</td>\n","      <td>112</td>\n","      <td>0.0</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>365 rows × 4 columns</p>\n","</div>"],"text/plain":["            Producto1  Producto2  Producto3  Producto4\n","Fecha                                                 \n","2009-01-01         29         20         35        NaN\n","2009-01-02         19          3         22        NaN\n","2009-01-03         24         12         22        NaN\n","2009-01-04         24          8         15        NaN\n","2009-01-05        120        111        141        NaN\n","...               ...        ...        ...        ...\n","2009-12-27         66         29         52        0.0\n","2009-12-28         61         41         99        0.0\n","2009-12-29         89         52        115        0.0\n","2009-12-30         76         43        115        0.0\n","2009-12-31         53         46        112        0.0\n","\n","[365 rows x 4 columns]"]},"metadata":{},"execution_count":28}]},{"cell_type":"code","metadata":{"id":"Qfmdp2nENKp_","colab":{"base_uri":"https://localhost:8080/","height":299},"executionInfo":{"status":"ok","timestamp":1631989320623,"user_tz":-120,"elapsed":93,"user":{"displayName":"MANUEL ALEJANDRO RODRIGUEZ GIRALDO","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"15792682869073318475"}},"outputId":"8625263b-af49-4353-8e0d-e778233e7076"},"source":["df.describe()"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Producto1</th>\n","      <th>Producto2</th>\n","      <th>Producto3</th>\n","      <th>Producto4</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>count</th>\n","      <td>365.000000</td>\n","      <td>365.000000</td>\n","      <td>365.000000</td>\n","      <td>178.000000</td>\n","    </tr>\n","    <tr>\n","      <th>mean</th>\n","      <td>2032.200000</td>\n","      <td>1060.252055</td>\n","      <td>2093.169863</td>\n","      <td>2576.359551</td>\n","    </tr>\n","    <tr>\n","      <th>std</th>\n","      <td>1878.879799</td>\n","      <td>1079.533086</td>\n","      <td>1854.368523</td>\n","      <td>2484.004743</td>\n","    </tr>\n","    <tr>\n","      <th>min</th>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","    </tr>\n","    <tr>\n","      <th>25%</th>\n","      <td>194.000000</td>\n","      <td>90.000000</td>\n","      <td>228.000000</td>\n","      <td>0.000000</td>\n","    </tr>\n","    <tr>\n","      <th>50%</th>\n","      <td>1726.000000</td>\n","      <td>678.000000</td>\n","      <td>1686.000000</td>\n","      <td>1443.500000</td>\n","    </tr>\n","    <tr>\n","      <th>75%</th>\n","      <td>3540.000000</td>\n","      <td>1882.000000</td>\n","      <td>3520.000000</td>\n","      <td>4638.000000</td>\n","    </tr>\n","    <tr>\n","      <th>max</th>\n","      <td>6626.000000</td>\n","      <td>4242.000000</td>\n","      <td>6587.000000</td>\n","      <td>7575.000000</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["         Producto1    Producto2    Producto3    Producto4\n","count   365.000000   365.000000   365.000000   178.000000\n","mean   2032.200000  1060.252055  2093.169863  2576.359551\n","std    1878.879799  1079.533086  1854.368523  2484.004743\n","min       0.000000     0.000000     0.000000     0.000000\n","25%     194.000000    90.000000   228.000000     0.000000\n","50%    1726.000000   678.000000  1686.000000  1443.500000\n","75%    3540.000000  1882.000000  3520.000000  4638.000000\n","max    6626.000000  4242.000000  6587.000000  7575.000000"]},"metadata":{},"execution_count":29}]},{"cell_type":"code","metadata":{"id":"TVtHx9DhymFo","colab":{"base_uri":"https://localhost:8080/","height":454},"executionInfo":{"status":"ok","timestamp":1631989320624,"user_tz":-120,"elapsed":92,"user":{"displayName":"MANUEL ALEJANDRO RODRIGUEZ GIRALDO","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"15792682869073318475"}},"outputId":"38560879-c500-4da5-97fd-6839cb196a33"},"source":["# Cambiando los datos\n","df.Producto4.fillna(df.Producto4.mean(),inplace=True) #Importante inplace\n","df"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Producto1</th>\n","      <th>Producto2</th>\n","      <th>Producto3</th>\n","      <th>Producto4</th>\n","    </tr>\n","    <tr>\n","      <th>Fecha</th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>2009-01-01</th>\n","      <td>29</td>\n","      <td>20</td>\n","      <td>35</td>\n","      <td>2576.359551</td>\n","    </tr>\n","    <tr>\n","      <th>2009-01-02</th>\n","      <td>19</td>\n","      <td>3</td>\n","      <td>22</td>\n","      <td>2576.359551</td>\n","    </tr>\n","    <tr>\n","      <th>2009-01-03</th>\n","      <td>24</td>\n","      <td>12</td>\n","      <td>22</td>\n","      <td>2576.359551</td>\n","    </tr>\n","    <tr>\n","      <th>2009-01-04</th>\n","      <td>24</td>\n","      <td>8</td>\n","      <td>15</td>\n","      <td>2576.359551</td>\n","    </tr>\n","    <tr>\n","      <th>2009-01-05</th>\n","      <td>120</td>\n","      <td>111</td>\n","      <td>141</td>\n","      <td>2576.359551</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>2009-12-27</th>\n","      <td>66</td>\n","      <td>29</td>\n","      <td>52</td>\n","      <td>0.000000</td>\n","    </tr>\n","    <tr>\n","      <th>2009-12-28</th>\n","      <td>61</td>\n","      <td>41</td>\n","      <td>99</td>\n","      <td>0.000000</td>\n","    </tr>\n","    <tr>\n","      <th>2009-12-29</th>\n","      <td>89</td>\n","      <td>52</td>\n","      <td>115</td>\n","      <td>0.000000</td>\n","    </tr>\n","    <tr>\n","      <th>2009-12-30</th>\n","      <td>76</td>\n","      <td>43</td>\n","      <td>115</td>\n","      <td>0.000000</td>\n","    </tr>\n","    <tr>\n","      <th>2009-12-31</th>\n","      <td>53</td>\n","      <td>46</td>\n","      <td>112</td>\n","      <td>0.000000</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>365 rows × 4 columns</p>\n","</div>"],"text/plain":["            Producto1  Producto2  Producto3    Producto4\n","Fecha                                                   \n","2009-01-01         29         20         35  2576.359551\n","2009-01-02         19          3         22  2576.359551\n","2009-01-03         24         12         22  2576.359551\n","2009-01-04         24          8         15  2576.359551\n","2009-01-05        120        111        141  2576.359551\n","...               ...        ...        ...          ...\n","2009-12-27         66         29         52     0.000000\n","2009-12-28         61         41         99     0.000000\n","2009-12-29         89         52        115     0.000000\n","2009-12-30         76         43        115     0.000000\n","2009-12-31         53         46        112     0.000000\n","\n","[365 rows x 4 columns]"]},"metadata":{},"execution_count":30}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":299},"id":"crkn3kFvjaLe","executionInfo":{"status":"ok","timestamp":1631989320624,"user_tz":-120,"elapsed":90,"user":{"displayName":"MANUEL ALEJANDRO RODRIGUEZ GIRALDO","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"15792682869073318475"}},"outputId":"51b8bc43-4351-4952-cb4b-fa4c874a5e54"},"source":["df.describe()"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Producto1</th>\n","      <th>Producto2</th>\n","      <th>Producto3</th>\n","      <th>Producto4</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>count</th>\n","      <td>365.000000</td>\n","      <td>365.000000</td>\n","      <td>365.000000</td>\n","      <td>365.000000</td>\n","    </tr>\n","    <tr>\n","      <th>mean</th>\n","      <td>2032.200000</td>\n","      <td>1060.252055</td>\n","      <td>2093.169863</td>\n","      <td>2576.359551</td>\n","    </tr>\n","    <tr>\n","      <th>std</th>\n","      <td>1878.879799</td>\n","      <td>1079.533086</td>\n","      <td>1854.368523</td>\n","      <td>1732.161423</td>\n","    </tr>\n","    <tr>\n","      <th>min</th>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","    </tr>\n","    <tr>\n","      <th>25%</th>\n","      <td>194.000000</td>\n","      <td>90.000000</td>\n","      <td>228.000000</td>\n","      <td>1588.000000</td>\n","    </tr>\n","    <tr>\n","      <th>50%</th>\n","      <td>1726.000000</td>\n","      <td>678.000000</td>\n","      <td>1686.000000</td>\n","      <td>2576.359551</td>\n","    </tr>\n","    <tr>\n","      <th>75%</th>\n","      <td>3540.000000</td>\n","      <td>1882.000000</td>\n","      <td>3520.000000</td>\n","      <td>2576.359551</td>\n","    </tr>\n","    <tr>\n","      <th>max</th>\n","      <td>6626.000000</td>\n","      <td>4242.000000</td>\n","      <td>6587.000000</td>\n","      <td>7575.000000</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["         Producto1    Producto2    Producto3    Producto4\n","count   365.000000   365.000000   365.000000   365.000000\n","mean   2032.200000  1060.252055  2093.169863  2576.359551\n","std    1878.879799  1079.533086  1854.368523  1732.161423\n","min       0.000000     0.000000     0.000000     0.000000\n","25%     194.000000    90.000000   228.000000  1588.000000\n","50%    1726.000000   678.000000  1686.000000  2576.359551\n","75%    3540.000000  1882.000000  3520.000000  2576.359551\n","max    6626.000000  4242.000000  6587.000000  7575.000000"]},"metadata":{},"execution_count":31}]},{"cell_type":"code","metadata":{"id":"I4kL4c10NjsF","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1631989320624,"user_tz":-120,"elapsed":88,"user":{"displayName":"MANUEL ALEJANDRO RODRIGUEZ GIRALDO","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"15792682869073318475"}},"outputId":"394b99e0-5de6-4085-b4bc-c4b36c04b242"},"source":["r=np.array(df['Producto4'])\n","r"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([2576.35955056, 2576.35955056, 2576.35955056, 2576.35955056,\n","       2576.35955056, 2576.35955056, 2576.35955056, 2576.35955056,\n","       2576.35955056, 2576.35955056, 2576.35955056, 2576.35955056,\n","       2576.35955056, 2576.35955056, 2576.35955056, 2576.35955056,\n","       2576.35955056, 2576.35955056, 2576.35955056, 2576.35955056,\n","       2576.35955056, 2576.35955056, 2576.35955056, 2576.35955056,\n","       2576.35955056, 2576.35955056, 2576.35955056, 2576.35955056,\n","       2576.35955056, 2576.35955056, 2576.35955056, 2576.35955056,\n","       2576.35955056, 2576.35955056, 2576.35955056, 2576.35955056,\n","       2576.35955056, 2576.35955056, 2576.35955056, 2576.35955056,\n","       2576.35955056, 2576.35955056, 2576.35955056, 2576.35955056,\n","       2576.35955056, 2576.35955056, 2576.35955056, 2576.35955056,\n","       2576.35955056, 2576.35955056, 2576.35955056, 2576.35955056,\n","       2576.35955056, 2576.35955056, 2576.35955056, 2576.35955056,\n","       2576.35955056, 2576.35955056, 2576.35955056, 2576.35955056,\n","       2576.35955056, 2576.35955056, 2576.35955056, 2576.35955056,\n","       2576.35955056, 2576.35955056, 2576.35955056, 2576.35955056,\n","       2576.35955056, 2576.35955056, 2576.35955056, 2576.35955056,\n","       2576.35955056, 2576.35955056, 2576.35955056, 2576.35955056,\n","       2576.35955056, 2576.35955056, 2576.35955056, 2576.35955056,\n","       2576.35955056, 2576.35955056, 2576.35955056, 2576.35955056,\n","       2576.35955056, 2576.35955056, 2576.35955056, 2576.35955056,\n","       2576.35955056, 2576.35955056, 2576.35955056, 2576.35955056,\n","       2576.35955056, 2576.35955056, 2576.35955056, 2576.35955056,\n","       2576.35955056, 2576.35955056, 2576.35955056, 2576.35955056,\n","       2576.35955056, 2576.35955056, 2576.35955056, 2576.35955056,\n","       2576.35955056, 2576.35955056, 2576.35955056, 2576.35955056,\n","       2576.35955056, 2576.35955056, 2576.35955056, 2576.35955056,\n","       2576.35955056, 2576.35955056, 2576.35955056, 2576.35955056,\n","       2576.35955056, 2576.35955056, 2576.35955056, 2576.35955056,\n","       2576.35955056, 2576.35955056, 2576.35955056, 2576.35955056,\n","       2576.35955056, 2576.35955056, 2576.35955056, 2576.35955056,\n","       2576.35955056, 2576.35955056, 2576.35955056, 2576.35955056,\n","       2576.35955056, 2576.35955056, 2576.35955056, 2576.35955056,\n","       2576.35955056, 2576.35955056, 2576.35955056, 2576.35955056,\n","       2576.35955056, 2576.35955056, 2576.35955056, 2576.35955056,\n","       2576.35955056, 2576.35955056, 2576.35955056, 2576.35955056,\n","       2576.35955056, 2576.35955056, 2576.35955056, 2576.35955056,\n","       2576.35955056, 2576.35955056, 2576.35955056, 2576.35955056,\n","       2576.35955056, 2576.35955056, 2576.35955056, 2576.35955056,\n","       2576.35955056, 2576.35955056, 2576.35955056, 2576.35955056,\n","       2576.35955056, 2576.35955056, 2576.35955056, 2576.35955056,\n","       2576.35955056, 2576.35955056, 2576.35955056, 2576.35955056,\n","       2576.35955056, 2576.35955056, 2576.35955056, 2576.35955056,\n","       2576.35955056, 2576.35955056, 2576.35955056, 2576.35955056,\n","       2576.35955056, 2576.35955056, 2576.35955056, 2576.35955056,\n","       2576.35955056, 2576.35955056, 2576.35955056, 2156.        ,\n","       4548.        , 7575.        , 7268.        , 2320.        ,\n","       5081.        , 4236.        , 3755.        , 6939.        ,\n","       4278.        , 5999.        , 3586.        , 4132.        ,\n","       7064.        , 6996.        , 4331.        , 6134.        ,\n","       4639.        , 4635.        , 2144.        , 5041.        ,\n","       7219.        , 5041.        , 7208.        , 5237.        ,\n","       5869.        , 1753.        , 7194.        , 5384.        ,\n","       7121.        , 5259.        , 5103.        , 5514.        ,\n","       3524.        , 4187.        , 4359.        , 7127.        ,\n","       6971.        , 6178.        , 5078.        , 4416.        ,\n","       5683.        , 5647.        , 6901.        , 4902.        ,\n","       3752.        , 4822.        , 4015.        , 5534.        ,\n","       7044.        , 6242.        , 6239.        , 5661.        ,\n","       1445.        , 3064.        , 5941.        , 6939.        ,\n","       7052.        , 6864.        , 5837.        , 4185.        ,\n","       4036.        , 4375.        , 6763.        , 6686.        ,\n","       6520.        , 6044.        , 5205.        , 3959.        ,\n","       4263.        , 4379.        , 4256.        , 3985.        ,\n","       2169.        , 2550.        , 2605.        , 3599.        ,\n","       1923.        , 2044.        , 3183.        , 2709.        ,\n","       2547.        ,  656.        , 1415.        , 1342.        ,\n","       1799.        , 1588.        , 1906.        ,  705.        ,\n","       1116.        , 1773.        , 2211.        ,  984.        ,\n","       1967.        ,  663.        , 1003.        ,  825.        ,\n","        924.        ,  870.        , 1373.        , 1311.        ,\n","       1238.        ,  919.        , 1006.        , 1483.        ,\n","       1374.        , 1442.        ,  633.        ,  952.        ,\n","        286.        ,  833.        , 1191.        , 1114.        ,\n","       1075.        , 1230.        ,  958.        ,  309.        ,\n","        859.        , 1208.        ,  798.        , 1046.        ,\n","        906.        ,  864.        ,  552.        , 1063.        ,\n","       1341.        , 1300.        , 1175.        , 1108.        ,\n","       1005.        ,  321.        ,  404.        ,    0.        ,\n","          0.        ,    0.        ,    0.        ,    0.        ,\n","          0.        ,    0.        ,    0.        ,    0.        ,\n","          0.        ,    0.        ,    0.        ,    0.        ,\n","          0.        ,    0.        ,    0.        ,    0.        ,\n","          0.        ,    0.        ,    0.        ,    0.        ,\n","          0.        ,    0.        ,    0.        ,    0.        ,\n","          0.        ,    0.        ,    0.        ,    0.        ,\n","          0.        ,    0.        ,    0.        ,    0.        ,\n","          0.        ,    0.        ,    0.        ,    0.        ,\n","          0.        ,    0.        ,    0.        ,    0.        ,\n","          0.        ,    0.        ,    0.        ,    0.        ,\n","          0.        ])"]},"metadata":{},"execution_count":32}]},{"cell_type":"markdown","metadata":{"id":"JozGd7c9Fsso"},"source":["<p><a name=\"indexacion\"></a></p>\n","\n","## 2.3. Indexación y localización\n","Usando los comandos `iloc` y `loc`  en un dataframe, se puede acceder a los datos con base en las etiquetas y la ubicación respectivamente "]},{"cell_type":"code","metadata":{"id":"6ozNIUigzLgG","colab":{"base_uri":"https://localhost:8080/","height":236},"executionInfo":{"status":"ok","timestamp":1631989320625,"user_tz":-120,"elapsed":81,"user":{"displayName":"MANUEL ALEJANDRO RODRIGUEZ GIRALDO","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"15792682869073318475"}},"outputId":"196e49e7-8ef6-4b1d-feaf-6d5cf10bc5ca"},"source":["df.iloc[100:110:2]"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Producto1</th>\n","      <th>Producto2</th>\n","      <th>Producto3</th>\n","      <th>Producto4</th>\n","    </tr>\n","    <tr>\n","      <th>Fecha</th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>2009-04-11</th>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>2576.359551</td>\n","    </tr>\n","    <tr>\n","      <th>2009-04-13</th>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>2576.359551</td>\n","    </tr>\n","    <tr>\n","      <th>2009-04-15</th>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>2576.359551</td>\n","    </tr>\n","    <tr>\n","      <th>2009-04-17</th>\n","      <td>1286</td>\n","      <td>820</td>\n","      <td>1436</td>\n","      <td>2576.359551</td>\n","    </tr>\n","    <tr>\n","      <th>2009-04-19</th>\n","      <td>2131</td>\n","      <td>1155</td>\n","      <td>1426</td>\n","      <td>2576.359551</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["            Producto1  Producto2  Producto3    Producto4\n","Fecha                                                   \n","2009-04-11          0          0          0  2576.359551\n","2009-04-13          0          0          0  2576.359551\n","2009-04-15          0          0          0  2576.359551\n","2009-04-17       1286        820       1436  2576.359551\n","2009-04-19       2131       1155       1426  2576.359551"]},"metadata":{},"execution_count":33}]},{"cell_type":"markdown","metadata":{"id":"xQ3ai7KcPKdA"},"source":["Indexación para un subconjunto de columnas"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":309},"id":"nREsnuxXlLr6","executionInfo":{"status":"ok","timestamp":1631989320626,"user_tz":-120,"elapsed":81,"user":{"displayName":"MANUEL ALEJANDRO RODRIGUEZ GIRALDO","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"15792682869073318475"}},"outputId":"b5be5e7c-94d2-4f63-a59d-f8060a806c5c"},"source":["df.plot()"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["<matplotlib.axes._subplots.AxesSubplot at 0x7f75d1220290>"]},"metadata":{},"execution_count":34},{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"needs_background":"light"}}]},{"cell_type":"code","metadata":{"id":"Vy9_2BNyPJPU","colab":{"base_uri":"https://localhost:8080/","height":393},"executionInfo":{"status":"ok","timestamp":1631989320626,"user_tz":-120,"elapsed":73,"user":{"displayName":"MANUEL ALEJANDRO RODRIGUEZ GIRALDO","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"15792682869073318475"}},"outputId":"0c20492c-99ed-4bd5-c75b-1f664c373c66"},"source":["df[['Producto1','Producto4']].iloc[100:110]"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Producto1</th>\n","      <th>Producto4</th>\n","    </tr>\n","    <tr>\n","      <th>Fecha</th>\n","      <th></th>\n","      <th></th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>2009-04-11</th>\n","      <td>0</td>\n","      <td>2576.359551</td>\n","    </tr>\n","    <tr>\n","      <th>2009-04-12</th>\n","      <td>0</td>\n","      <td>2576.359551</td>\n","    </tr>\n","    <tr>\n","      <th>2009-04-13</th>\n","      <td>0</td>\n","      <td>2576.359551</td>\n","    </tr>\n","    <tr>\n","      <th>2009-04-14</th>\n","      <td>0</td>\n","      <td>2576.359551</td>\n","    </tr>\n","    <tr>\n","      <th>2009-04-15</th>\n","      <td>0</td>\n","      <td>2576.359551</td>\n","    </tr>\n","    <tr>\n","      <th>2009-04-16</th>\n","      <td>0</td>\n","      <td>2576.359551</td>\n","    </tr>\n","    <tr>\n","      <th>2009-04-17</th>\n","      <td>1286</td>\n","      <td>2576.359551</td>\n","    </tr>\n","    <tr>\n","      <th>2009-04-18</th>\n","      <td>1178</td>\n","      <td>2576.359551</td>\n","    </tr>\n","    <tr>\n","      <th>2009-04-19</th>\n","      <td>2131</td>\n","      <td>2576.359551</td>\n","    </tr>\n","    <tr>\n","      <th>2009-04-20</th>\n","      <td>2709</td>\n","      <td>2576.359551</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["            Producto1    Producto4\n","Fecha                             \n","2009-04-11          0  2576.359551\n","2009-04-12          0  2576.359551\n","2009-04-13          0  2576.359551\n","2009-04-14          0  2576.359551\n","2009-04-15          0  2576.359551\n","2009-04-16          0  2576.359551\n","2009-04-17       1286  2576.359551\n","2009-04-18       1178  2576.359551\n","2009-04-19       2131  2576.359551\n","2009-04-20       2709  2576.359551"]},"metadata":{},"execution_count":35}]},{"cell_type":"code","metadata":{"id":"UZwfvVR1yVoH","colab":{"base_uri":"https://localhost:8080/","height":454},"executionInfo":{"status":"ok","timestamp":1631989320627,"user_tz":-120,"elapsed":73,"user":{"displayName":"MANUEL ALEJANDRO RODRIGUEZ GIRALDO","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"15792682869073318475"}},"outputId":"52442dc0-427c-431b-c1da-efbbd64d1efd"},"source":["df.iloc[::-1,1:3:1]"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Producto2</th>\n","      <th>Producto3</th>\n","    </tr>\n","    <tr>\n","      <th>Fecha</th>\n","      <th></th>\n","      <th></th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>2009-12-31</th>\n","      <td>46</td>\n","      <td>112</td>\n","    </tr>\n","    <tr>\n","      <th>2009-12-30</th>\n","      <td>43</td>\n","      <td>115</td>\n","    </tr>\n","    <tr>\n","      <th>2009-12-29</th>\n","      <td>52</td>\n","      <td>115</td>\n","    </tr>\n","    <tr>\n","      <th>2009-12-28</th>\n","      <td>41</td>\n","      <td>99</td>\n","    </tr>\n","    <tr>\n","      <th>2009-12-27</th>\n","      <td>29</td>\n","      <td>52</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>2009-01-05</th>\n","      <td>111</td>\n","      <td>141</td>\n","    </tr>\n","    <tr>\n","      <th>2009-01-04</th>\n","      <td>8</td>\n","      <td>15</td>\n","    </tr>\n","    <tr>\n","      <th>2009-01-03</th>\n","      <td>12</td>\n","      <td>22</td>\n","    </tr>\n","    <tr>\n","      <th>2009-01-02</th>\n","      <td>3</td>\n","      <td>22</td>\n","    </tr>\n","    <tr>\n","      <th>2009-01-01</th>\n","      <td>20</td>\n","      <td>35</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>365 rows × 2 columns</p>\n","</div>"],"text/plain":["            Producto2  Producto3\n","Fecha                           \n","2009-12-31         46        112\n","2009-12-30         43        115\n","2009-12-29         52        115\n","2009-12-28         41         99\n","2009-12-27         29         52\n","...               ...        ...\n","2009-01-05        111        141\n","2009-01-04          8         15\n","2009-01-03         12         22\n","2009-01-02          3         22\n","2009-01-01         20         35\n","\n","[365 rows x 2 columns]"]},"metadata":{},"execution_count":36}]},{"cell_type":"code","metadata":{"id":"_-TPOca3zOHd","colab":{"base_uri":"https://localhost:8080/","height":393},"executionInfo":{"status":"ok","timestamp":1631989320628,"user_tz":-120,"elapsed":73,"user":{"displayName":"MANUEL ALEJANDRO RODRIGUEZ GIRALDO","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"15792682869073318475"}},"outputId":"0d0899a9-a700-4fd5-ceda-e3cebebfe838"},"source":["df.loc[\"2009-10-01\":\"2009-10-10\"]"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Producto1</th>\n","      <th>Producto2</th>\n","      <th>Producto3</th>\n","      <th>Producto4</th>\n","    </tr>\n","    <tr>\n","      <th>Fecha</th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>2009-10-01</th>\n","      <td>2643</td>\n","      <td>22</td>\n","      <td>3528</td>\n","      <td>1588.0</td>\n","    </tr>\n","    <tr>\n","      <th>2009-10-02</th>\n","      <td>2865</td>\n","      <td>36</td>\n","      <td>3735</td>\n","      <td>1906.0</td>\n","    </tr>\n","    <tr>\n","      <th>2009-10-03</th>\n","      <td>993</td>\n","      <td>7</td>\n","      <td>1362</td>\n","      <td>705.0</td>\n","    </tr>\n","    <tr>\n","      <th>2009-10-04</th>\n","      <td>1336</td>\n","      <td>0</td>\n","      <td>1620</td>\n","      <td>1116.0</td>\n","    </tr>\n","    <tr>\n","      <th>2009-10-05</th>\n","      <td>2935</td>\n","      <td>308</td>\n","      <td>3801</td>\n","      <td>1773.0</td>\n","    </tr>\n","    <tr>\n","      <th>2009-10-06</th>\n","      <td>3852</td>\n","      <td>7</td>\n","      <td>4610</td>\n","      <td>2211.0</td>\n","    </tr>\n","    <tr>\n","      <th>2009-10-07</th>\n","      <td>2115</td>\n","      <td>3</td>\n","      <td>2825</td>\n","      <td>984.0</td>\n","    </tr>\n","    <tr>\n","      <th>2009-10-08</th>\n","      <td>3336</td>\n","      <td>9</td>\n","      <td>4146</td>\n","      <td>1967.0</td>\n","    </tr>\n","    <tr>\n","      <th>2009-10-09</th>\n","      <td>1302</td>\n","      <td>482</td>\n","      <td>1686</td>\n","      <td>663.0</td>\n","    </tr>\n","    <tr>\n","      <th>2009-10-10</th>\n","      <td>1407</td>\n","      <td>725</td>\n","      <td>1443</td>\n","      <td>1003.0</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["            Producto1  Producto2  Producto3  Producto4\n","Fecha                                                 \n","2009-10-01       2643         22       3528     1588.0\n","2009-10-02       2865         36       3735     1906.0\n","2009-10-03        993          7       1362      705.0\n","2009-10-04       1336          0       1620     1116.0\n","2009-10-05       2935        308       3801     1773.0\n","2009-10-06       3852          7       4610     2211.0\n","2009-10-07       2115          3       2825      984.0\n","2009-10-08       3336          9       4146     1967.0\n","2009-10-09       1302        482       1686      663.0\n","2009-10-10       1407        725       1443     1003.0"]},"metadata":{},"execution_count":37}]},{"cell_type":"markdown","metadata":{"id":"ELqP9yEhg1Tb"},"source":["Parar reasignar un valor de dataframe, simplemente se debe saber la localización, ya sea por indice o por etiqueta y usar el operador de asignación `=`"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"fLfmbzmqJ5tU","executionInfo":{"status":"ok","timestamp":1631989320629,"user_tz":-120,"elapsed":73,"user":{"displayName":"MANUEL ALEJANDRO RODRIGUEZ GIRALDO","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"15792682869073318475"}},"outputId":"39d15558-074d-406a-d587-1eaf162d540c"},"source":["df.iloc[109,0]"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["2709"]},"metadata":{},"execution_count":38}]},{"cell_type":"code","metadata":{"id":"y3iwyTO2gZhD"},"source":["df.iloc[109,0]=1000"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"JjRmd-N3hVqZ"},"source":["df.loc['2009-04-19','Producto1']=998"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"b20ibG_aKKcF","executionInfo":{"status":"ok","timestamp":1631989320633,"user_tz":-120,"elapsed":69,"user":{"displayName":"MANUEL ALEJANDRO RODRIGUEZ GIRALDO","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"15792682869073318475"}},"outputId":"23c38b35-b836-4061-c7b7-db9b306c54df"},"source":["df.loc['2009-04-19','Producto1']"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["998.0"]},"metadata":{},"execution_count":41}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"1dfV0vxlnHhC","executionInfo":{"status":"ok","timestamp":1631989320634,"user_tz":-120,"elapsed":60,"user":{"displayName":"MANUEL ALEJANDRO RODRIGUEZ GIRALDO","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"15792682869073318475"}},"outputId":"d8806e43-ce5e-485b-c534-31f6f224fc9d"},"source":["df.index"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["DatetimeIndex(['2009-01-01', '2009-01-02', '2009-01-03', '2009-01-04',\n","               '2009-01-05', '2009-01-06', '2009-01-07', '2009-01-08',\n","               '2009-01-09', '2009-01-10',\n","               ...\n","               '2009-12-22', '2009-12-23', '2009-12-24', '2009-12-25',\n","               '2009-12-26', '2009-12-27', '2009-12-28', '2009-12-29',\n","               '2009-12-30', '2009-12-31'],\n","              dtype='datetime64[ns]', name='Fecha', length=365, freq=None)"]},"metadata":{},"execution_count":42}]},{"cell_type":"code","metadata":{"id":"Oof4P37qQudQ","colab":{"base_uri":"https://localhost:8080/","height":236},"executionInfo":{"status":"ok","timestamp":1631989320635,"user_tz":-120,"elapsed":54,"user":{"displayName":"MANUEL ALEJANDRO RODRIGUEZ GIRALDO","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"15792682869073318475"}},"outputId":"9c37689f-0578-4de3-aba0-e283e37c2df4"},"source":["df.head()"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Producto1</th>\n","      <th>Producto2</th>\n","      <th>Producto3</th>\n","      <th>Producto4</th>\n","    </tr>\n","    <tr>\n","      <th>Fecha</th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>2009-01-01</th>\n","      <td>29</td>\n","      <td>20</td>\n","      <td>35</td>\n","      <td>2576.359551</td>\n","    </tr>\n","    <tr>\n","      <th>2009-01-02</th>\n","      <td>19</td>\n","      <td>3</td>\n","      <td>22</td>\n","      <td>2576.359551</td>\n","    </tr>\n","    <tr>\n","      <th>2009-01-03</th>\n","      <td>24</td>\n","      <td>12</td>\n","      <td>22</td>\n","      <td>2576.359551</td>\n","    </tr>\n","    <tr>\n","      <th>2009-01-04</th>\n","      <td>24</td>\n","      <td>8</td>\n","      <td>15</td>\n","      <td>2576.359551</td>\n","    </tr>\n","    <tr>\n","      <th>2009-01-05</th>\n","      <td>120</td>\n","      <td>111</td>\n","      <td>141</td>\n","      <td>2576.359551</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["            Producto1  Producto2  Producto3    Producto4\n","Fecha                                                   \n","2009-01-01         29         20         35  2576.359551\n","2009-01-02         19          3         22  2576.359551\n","2009-01-03         24         12         22  2576.359551\n","2009-01-04         24          8         15  2576.359551\n","2009-01-05        120        111        141  2576.359551"]},"metadata":{},"execution_count":43}]},{"cell_type":"code","metadata":{"id":"Az9DP60WQwME"},"source":[""],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"rSN2AyoUhukD"},"source":["Validemos la re-asignación de los valores"]},{"cell_type":"code","metadata":{"id":"ED45O4mPhiBG","colab":{"base_uri":"https://localhost:8080/","height":143},"executionInfo":{"status":"ok","timestamp":1631989320637,"user_tz":-120,"elapsed":54,"user":{"displayName":"MANUEL ALEJANDRO RODRIGUEZ GIRALDO","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"15792682869073318475"}},"outputId":"af7ba8f4-487c-4ce8-9607-df5633fa881b"},"source":["df.iloc[108:110, 0 :1]\n","#df.iloc[111:113, 0:1]"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Producto1</th>\n","    </tr>\n","    <tr>\n","      <th>Fecha</th>\n","      <th></th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>2009-04-19</th>\n","      <td>998</td>\n","    </tr>\n","    <tr>\n","      <th>2009-04-20</th>\n","      <td>1000</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["            Producto1\n","Fecha                \n","2009-04-19        998\n","2009-04-20       1000"]},"metadata":{},"execution_count":44}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":143},"id":"qXVrefyKmOV2","executionInfo":{"status":"ok","timestamp":1631989320638,"user_tz":-120,"elapsed":54,"user":{"displayName":"MANUEL ALEJANDRO RODRIGUEZ GIRALDO","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"15792682869073318475"}},"outputId":"6e191562-f6d1-478d-f818-0620fd27764d"},"source":["df.iloc[108:110, 0 :1] "],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Producto1</th>\n","    </tr>\n","    <tr>\n","      <th>Fecha</th>\n","      <th></th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>2009-04-19</th>\n","      <td>998</td>\n","    </tr>\n","    <tr>\n","      <th>2009-04-20</th>\n","      <td>1000</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["            Producto1\n","Fecha                \n","2009-04-19        998\n","2009-04-20       1000"]},"metadata":{},"execution_count":45}]},{"cell_type":"markdown","metadata":{"id":"ZkASh8amHAZJ"},"source":["<p><a name=\"organizacionDF\"></a></p>\n","\n","## 2.4. Organización de dataframes\n","El método `sort_values` permite organizar los dataframes con base a los valores de las columnas o las filas"]},{"cell_type":"code","metadata":{"id":"mH5XUssqzRTP","colab":{"base_uri":"https://localhost:8080/","height":454},"executionInfo":{"status":"ok","timestamp":1631989320638,"user_tz":-120,"elapsed":53,"user":{"displayName":"MANUEL ALEJANDRO RODRIGUEZ GIRALDO","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"15792682869073318475"}},"outputId":"90769c8d-5b00-4284-cbbe-9a2b808355a7"},"source":["df.sort_values(by=[\"Producto1\", \"Producto2\"],ascending=False)"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Producto1</th>\n","      <th>Producto2</th>\n","      <th>Producto3</th>\n","      <th>Producto4</th>\n","    </tr>\n","    <tr>\n","      <th>Fecha</th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>2009-07-09</th>\n","      <td>6626</td>\n","      <td>4227</td>\n","      <td>5751</td>\n","      <td>7575.000000</td>\n","    </tr>\n","    <tr>\n","      <th>2009-06-17</th>\n","      <td>6320</td>\n","      <td>3388</td>\n","      <td>6047</td>\n","      <td>2576.359551</td>\n","    </tr>\n","    <tr>\n","      <th>2009-07-10</th>\n","      <td>6274</td>\n","      <td>4242</td>\n","      <td>5435</td>\n","      <td>7268.000000</td>\n","    </tr>\n","    <tr>\n","      <th>2009-07-15</th>\n","      <td>6100</td>\n","      <td>3767</td>\n","      <td>5536</td>\n","      <td>6939.000000</td>\n","    </tr>\n","    <tr>\n","      <th>2009-06-05</th>\n","      <td>6028</td>\n","      <td>4120</td>\n","      <td>4223</td>\n","      <td>2576.359551</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>2009-04-12</th>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>2576.359551</td>\n","    </tr>\n","    <tr>\n","      <th>2009-04-13</th>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>2576.359551</td>\n","    </tr>\n","    <tr>\n","      <th>2009-04-14</th>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>2576.359551</td>\n","    </tr>\n","    <tr>\n","      <th>2009-04-15</th>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>2576.359551</td>\n","    </tr>\n","    <tr>\n","      <th>2009-04-16</th>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>2576.359551</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>365 rows × 4 columns</p>\n","</div>"],"text/plain":["            Producto1  Producto2  Producto3    Producto4\n","Fecha                                                   \n","2009-07-09       6626       4227       5751  7575.000000\n","2009-06-17       6320       3388       6047  2576.359551\n","2009-07-10       6274       4242       5435  7268.000000\n","2009-07-15       6100       3767       5536  6939.000000\n","2009-06-05       6028       4120       4223  2576.359551\n","...               ...        ...        ...          ...\n","2009-04-12          0          0          0  2576.359551\n","2009-04-13          0          0          0  2576.359551\n","2009-04-14          0          0          0  2576.359551\n","2009-04-15          0          0          0  2576.359551\n","2009-04-16          0          0          0  2576.359551\n","\n","[365 rows x 4 columns]"]},"metadata":{},"execution_count":46}]},{"cell_type":"code","metadata":{"id":"XglIwPSCRbtK","colab":{"base_uri":"https://localhost:8080/","height":454},"executionInfo":{"status":"ok","timestamp":1631989320639,"user_tz":-120,"elapsed":53,"user":{"displayName":"MANUEL ALEJANDRO RODRIGUEZ GIRALDO","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"15792682869073318475"}},"outputId":"0db78f92-6703-46c4-81fb-0fbb3ee40d1a"},"source":["df"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Producto1</th>\n","      <th>Producto2</th>\n","      <th>Producto3</th>\n","      <th>Producto4</th>\n","    </tr>\n","    <tr>\n","      <th>Fecha</th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>2009-01-01</th>\n","      <td>29</td>\n","      <td>20</td>\n","      <td>35</td>\n","      <td>2576.359551</td>\n","    </tr>\n","    <tr>\n","      <th>2009-01-02</th>\n","      <td>19</td>\n","      <td>3</td>\n","      <td>22</td>\n","      <td>2576.359551</td>\n","    </tr>\n","    <tr>\n","      <th>2009-01-03</th>\n","      <td>24</td>\n","      <td>12</td>\n","      <td>22</td>\n","      <td>2576.359551</td>\n","    </tr>\n","    <tr>\n","      <th>2009-01-04</th>\n","      <td>24</td>\n","      <td>8</td>\n","      <td>15</td>\n","      <td>2576.359551</td>\n","    </tr>\n","    <tr>\n","      <th>2009-01-05</th>\n","      <td>120</td>\n","      <td>111</td>\n","      <td>141</td>\n","      <td>2576.359551</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>2009-12-27</th>\n","      <td>66</td>\n","      <td>29</td>\n","      <td>52</td>\n","      <td>0.000000</td>\n","    </tr>\n","    <tr>\n","      <th>2009-12-28</th>\n","      <td>61</td>\n","      <td>41</td>\n","      <td>99</td>\n","      <td>0.000000</td>\n","    </tr>\n","    <tr>\n","      <th>2009-12-29</th>\n","      <td>89</td>\n","      <td>52</td>\n","      <td>115</td>\n","      <td>0.000000</td>\n","    </tr>\n","    <tr>\n","      <th>2009-12-30</th>\n","      <td>76</td>\n","      <td>43</td>\n","      <td>115</td>\n","      <td>0.000000</td>\n","    </tr>\n","    <tr>\n","      <th>2009-12-31</th>\n","      <td>53</td>\n","      <td>46</td>\n","      <td>112</td>\n","      <td>0.000000</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>365 rows × 4 columns</p>\n","</div>"],"text/plain":["            Producto1  Producto2  Producto3    Producto4\n","Fecha                                                   \n","2009-01-01         29         20         35  2576.359551\n","2009-01-02         19          3         22  2576.359551\n","2009-01-03         24         12         22  2576.359551\n","2009-01-04         24          8         15  2576.359551\n","2009-01-05        120        111        141  2576.359551\n","...               ...        ...        ...          ...\n","2009-12-27         66         29         52     0.000000\n","2009-12-28         61         41         99     0.000000\n","2009-12-29         89         52        115     0.000000\n","2009-12-30         76         43        115     0.000000\n","2009-12-31         53         46        112     0.000000\n","\n","[365 rows x 4 columns]"]},"metadata":{},"execution_count":47}]},{"cell_type":"code","metadata":{"id":"TtJetaUdROMR"},"source":["df.sort_values?"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"hAo8K_5pzjjA"},"source":["<p><a name=\"graficasPandas\"></a></p>\n","\n","## 2.5. Graficando desde pandas\n","Pandas permite realizar algunas gráficas directamente con el comando `DataFrame.plot()`.   "]},{"cell_type":"code","metadata":{"id":"s3PyHmNH02_H","colab":{"base_uri":"https://localhost:8080/","height":297},"executionInfo":{"status":"ok","timestamp":1631989322143,"user_tz":-120,"elapsed":1555,"user":{"displayName":"MANUEL ALEJANDRO RODRIGUEZ GIRALDO","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"15792682869073318475"}},"outputId":"62a72e40-58b1-454c-c068-1b1cec47ba48"},"source":["df.plot(y='Producto2',x='Producto1',kind='scatter',)"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["<matplotlib.axes._subplots.AxesSubplot at 0x7f75d095d350>"]},"metadata":{},"execution_count":49},{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"needs_background":"light"}}]},{"cell_type":"code","metadata":{"id":"sGFfkAxpzWnJ","colab":{"base_uri":"https://localhost:8080/","height":253},"executionInfo":{"status":"ok","timestamp":1631989322144,"user_tz":-120,"elapsed":9,"user":{"displayName":"MANUEL ALEJANDRO RODRIGUEZ GIRALDO","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"15792682869073318475"}},"outputId":"e9023901-01e1-46ec-f4d3-1224c4f66643"},"source":["import matplotlib.pyplot as plt\n","\n","df.plot(figsize=(15,3),)\n","plt.ylabel(\"Cantidad de productos\")\n","plt.title('Titulp')\n","plt.show()"],"execution_count":null,"outputs":[{"output_type":"display_data","data":{"image/png":"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\n","text/plain":["<Figure size 1080x216 with 1 Axes>"]},"metadata":{"needs_background":"light"}}]},{"cell_type":"code","metadata":{"id":"a6MERvkCYIU2"},"source":["df.plot?"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"FbXvkQgdinjx"},"source":["Además de gráficos de línea, pandas tiene otro tipo de gráficos los cuales se puede usar con el argumento `kind` dentro del método DataFrame.plot(). Los otro gráficos disponibles son:\n","\n","* `'bar'` or `'barh'` for bar plots\n","* `'hist'` for histogram\n","* `'box'` for boxplot\n","* `'kde'` or `'density'` for density plots\n","* ‘`'area'` for area plots\n","* `'scatter'` for scatter plots\n","* `'hexbin'` for hexagonal bin plots\n","* `'pie'` for pie plots"]},{"cell_type":"code","metadata":{"id":"V0ftRiDyoG2_","colab":{"base_uri":"https://localhost:8080/","height":279},"executionInfo":{"status":"ok","timestamp":1631989323031,"user_tz":-120,"elapsed":893,"user":{"displayName":"MANUEL ALEJANDRO RODRIGUEZ GIRALDO","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"15792682869073318475"}},"outputId":"52a193e9-5bcf-43f4-c7ea-2e85739fa7f3"},"source":["import matplotlib.pyplot as plt\n","df.Producto1.plot(kind='hist', grid=True, bins=8)\n","\n","plt.xlabel('Numero de productos')\n","plt.show()"],"execution_count":null,"outputs":[{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"needs_background":"light"}}]},{"cell_type":"code","metadata":{"id":"0xC0aaJKbKUW"},"source":["a=np.array([1,1,1,1,1,1,1])"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"z0bzZ0E4tM33"},"source":["import math"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":171},"id":"o7_Wm_ybtOjY","executionInfo":{"status":"error","timestamp":1631989323098,"user_tz":-120,"elapsed":167,"user":{"displayName":"MANUEL ALEJANDRO RODRIGUEZ GIRALDO","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"15792682869073318475"}},"outputId":"577d29e0-0e3b-432e-f908-f659be1240dc"},"source":["math.cos(a)"],"execution_count":null,"outputs":[{"output_type":"error","ename":"TypeError","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mTypeError\u001b[0m                                 Traceback (most recent call last)","\u001b[0;32m<ipython-input-55-60ba4a8164bc>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mmath\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcos\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0ma\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m","\u001b[0;31mTypeError\u001b[0m: only size-1 arrays can be converted to Python scalars"]}]},{"cell_type":"markdown","metadata":{"id":"f_22rRw1W3kL"},"source":["<p><a name=\"operacionesColFil\"></a></p>\n","\n","## 2.6. Operaciones con columnas y filas\n","La función `apply` regresa algún valor después de aplicarle una función a cada columna/fila del dataframe. \n"]},{"cell_type":"code","metadata":{"id":"eCyZEb3zW2r0"},"source":["df['Producto3sqrt']=df.Producto3.apply(np.mean)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"yUNmqGbsYRD5","colab":{"base_uri":"https://localhost:8080/","height":236},"executionInfo":{"status":"ok","timestamp":1631990817094,"user_tz":-120,"elapsed":348,"user":{"displayName":"MANUEL ALEJANDRO RODRIGUEZ GIRALDO","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"15792682869073318475"}},"outputId":"4ecebf70-7a79-43a9-b4d3-6c458d05e67b"},"source":["df.tail()"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Producto1</th>\n","      <th>Producto2</th>\n","      <th>Producto3</th>\n","      <th>Producto4</th>\n","      <th>Producto3sqrt</th>\n","      <th>Total</th>\n","      <th>month</th>\n","    </tr>\n","    <tr>\n","      <th>Fecha</th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>2009-12-27</th>\n","      <td>66</td>\n","      <td>29</td>\n","      <td>52</td>\n","      <td>0.0</td>\n","      <td>52.0</td>\n","      <td>147</td>\n","      <td>12</td>\n","    </tr>\n","    <tr>\n","      <th>2009-12-28</th>\n","      <td>61</td>\n","      <td>41</td>\n","      <td>99</td>\n","      <td>0.0</td>\n","      <td>99.0</td>\n","      <td>201</td>\n","      <td>12</td>\n","    </tr>\n","    <tr>\n","      <th>2009-12-29</th>\n","      <td>89</td>\n","      <td>52</td>\n","      <td>115</td>\n","      <td>0.0</td>\n","      <td>115.0</td>\n","      <td>256</td>\n","      <td>12</td>\n","    </tr>\n","    <tr>\n","      <th>2009-12-30</th>\n","      <td>76</td>\n","      <td>43</td>\n","      <td>115</td>\n","      <td>0.0</td>\n","      <td>115.0</td>\n","      <td>234</td>\n","      <td>12</td>\n","    </tr>\n","    <tr>\n","      <th>2009-12-31</th>\n","      <td>53</td>\n","      <td>46</td>\n","      <td>112</td>\n","      <td>0.0</td>\n","      <td>112.0</td>\n","      <td>211</td>\n","      <td>12</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["            Producto1  Producto2  Producto3  ...  Producto3sqrt  Total  month\n","Fecha                                        ...                             \n","2009-12-27         66         29         52  ...           52.0    147     12\n","2009-12-28         61         41         99  ...           99.0    201     12\n","2009-12-29         89         52        115  ...          115.0    256     12\n","2009-12-30         76         43        115  ...          115.0    234     12\n","2009-12-31         53         46        112  ...          112.0    211     12\n","\n","[5 rows x 7 columns]"]},"metadata":{},"execution_count":88}]},{"cell_type":"code","metadata":{"id":"isWUHsqWvBQO"},"source":["df['Total']=df['Producto1']+df['Producto2']+df['Producto3']"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":236},"id":"aAh6BDHAvN5U","executionInfo":{"status":"ok","timestamp":1631989335477,"user_tz":-120,"elapsed":9,"user":{"displayName":"MANUEL ALEJANDRO RODRIGUEZ GIRALDO","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"15792682869073318475"}},"outputId":"b1d4a654-3128-4e18-9119-69dcac2ee54e"},"source":["df.head()"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Producto1</th>\n","      <th>Producto2</th>\n","      <th>Producto3</th>\n","      <th>Producto4</th>\n","      <th>Producto3sqrt</th>\n","      <th>Total</th>\n","    </tr>\n","    <tr>\n","      <th>Fecha</th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>2009-01-01</th>\n","      <td>29</td>\n","      <td>20</td>\n","      <td>35</td>\n","      <td>2576.359551</td>\n","      <td>5.916080</td>\n","      <td>84</td>\n","    </tr>\n","    <tr>\n","      <th>2009-01-02</th>\n","      <td>19</td>\n","      <td>3</td>\n","      <td>22</td>\n","      <td>2576.359551</td>\n","      <td>4.690416</td>\n","      <td>44</td>\n","    </tr>\n","    <tr>\n","      <th>2009-01-03</th>\n","      <td>24</td>\n","      <td>12</td>\n","      <td>22</td>\n","      <td>2576.359551</td>\n","      <td>4.690416</td>\n","      <td>58</td>\n","    </tr>\n","    <tr>\n","      <th>2009-01-04</th>\n","      <td>24</td>\n","      <td>8</td>\n","      <td>15</td>\n","      <td>2576.359551</td>\n","      <td>3.872983</td>\n","      <td>47</td>\n","    </tr>\n","    <tr>\n","      <th>2009-01-05</th>\n","      <td>120</td>\n","      <td>111</td>\n","      <td>141</td>\n","      <td>2576.359551</td>\n","      <td>11.874342</td>\n","      <td>372</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["            Producto1  Producto2  Producto3    Producto4  Producto3sqrt  Total\n","Fecha                                                                         \n","2009-01-01         29         20         35  2576.359551       5.916080     84\n","2009-01-02         19          3         22  2576.359551       4.690416     44\n","2009-01-03         24         12         22  2576.359551       4.690416     58\n","2009-01-04         24          8         15  2576.359551       3.872983     47\n","2009-01-05        120        111        141  2576.359551      11.874342    372"]},"metadata":{},"execution_count":59}]},{"cell_type":"code","metadata":{"id":"i3LBg-iZYbxY","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1631989335780,"user_tz":-120,"elapsed":16,"user":{"displayName":"MANUEL ALEJANDRO RODRIGUEZ GIRALDO","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"15792682869073318475"}},"outputId":"7d8a5021-638f-460b-eb86-3e891aa6bb04"},"source":["a =df.apply(np.sum, axis=1)\n","a"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["Fecha\n","2009-01-01    2750.275630\n","2009-01-02    2669.049966\n","2009-01-03    2697.049966\n","2009-01-04    2674.232534\n","2009-01-05    3332.233893\n","                 ...     \n","2009-12-27     301.211103\n","2009-12-28     411.949874\n","2009-12-29     522.723805\n","2009-12-30     478.723805\n","2009-12-31     432.583005\n","Length: 365, dtype: float64"]},"metadata":{},"execution_count":60}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"lT7ISeFwOKRY","executionInfo":{"status":"ok","timestamp":1631989336318,"user_tz":-120,"elapsed":19,"user":{"displayName":"MANUEL ALEJANDRO RODRIGUEZ GIRALDO","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"15792682869073318475"}},"outputId":"e5829441-efb5-49c6-fb1e-9cd3d8b934c8"},"source":["type(a)"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["pandas.core.series.Series"]},"metadata":{},"execution_count":61}]},{"cell_type":"code","metadata":{"id":"kw2hTTsiolEn","colab":{"base_uri":"https://localhost:8080/","height":266},"executionInfo":{"status":"ok","timestamp":1631989336717,"user_tz":-120,"elapsed":6,"user":{"displayName":"MANUEL ALEJANDRO RODRIGUEZ GIRALDO","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"15792682869073318475"}},"outputId":"e6c0ca00-90b0-4b97-b5a8-a1fea5bdc6f6"},"source":["df.apply(np.sum, axis=0).plot(kind='pie',)"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["<matplotlib.axes._subplots.AxesSubplot at 0x7f75d093ecd0>"]},"metadata":{},"execution_count":62},{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{}}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"olIlpQXcxKWi","executionInfo":{"status":"ok","timestamp":1631989337148,"user_tz":-120,"elapsed":10,"user":{"displayName":"MANUEL ALEJANDRO RODRIGUEZ GIRALDO","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"15792682869073318475"}},"outputId":"5cd7da4c-5f54-40cb-9291-85bca20c06fe"},"source":["df.info()"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["<class 'pandas.core.frame.DataFrame'>\n","DatetimeIndex: 365 entries, 2009-01-01 to 2009-12-31\n","Data columns (total 6 columns):\n"," #   Column         Non-Null Count  Dtype  \n","---  ------         --------------  -----  \n"," 0   Producto1      365 non-null    int64  \n"," 1   Producto2      365 non-null    int64  \n"," 2   Producto3      365 non-null    int64  \n"," 3   Producto4      365 non-null    float64\n"," 4   Producto3sqrt  365 non-null    float64\n"," 5   Total          365 non-null    int64  \n","dtypes: float64(2), int64(4)\n","memory usage: 30.0 KB\n"]}]},{"cell_type":"markdown","metadata":{"id":"ssS9xwPYz-fW"},"source":["<p><a name=\"agrupacion\"></a></p>\n","\n","## 2.7. Agrupando dataframes\n","El comando `groupby` permite agrupar y generar calculos y operaciónes sobre los valores agrupados."]},{"cell_type":"code","metadata":{"id":"Xyw-6Pzw0H6O","colab":{"base_uri":"https://localhost:8080/","height":705},"executionInfo":{"status":"ok","timestamp":1631989338324,"user_tz":-120,"elapsed":8,"user":{"displayName":"MANUEL ALEJANDRO RODRIGUEZ GIRALDO","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"15792682869073318475"}},"outputId":"d8f31e84-afb6-449f-a965-3299b9e9f3d0"},"source":["df[\"month\"] = [i.month for i in df.index]\n","df.head(20)"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Producto1</th>\n","      <th>Producto2</th>\n","      <th>Producto3</th>\n","      <th>Producto4</th>\n","      <th>Producto3sqrt</th>\n","      <th>Total</th>\n","      <th>month</th>\n","    </tr>\n","    <tr>\n","      <th>Fecha</th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>2009-01-01</th>\n","      <td>29</td>\n","      <td>20</td>\n","      <td>35</td>\n","      <td>2576.359551</td>\n","      <td>5.916080</td>\n","      <td>84</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>2009-01-02</th>\n","      <td>19</td>\n","      <td>3</td>\n","      <td>22</td>\n","      <td>2576.359551</td>\n","      <td>4.690416</td>\n","      <td>44</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>2009-01-03</th>\n","      <td>24</td>\n","      <td>12</td>\n","      <td>22</td>\n","      <td>2576.359551</td>\n","      <td>4.690416</td>\n","      <td>58</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>2009-01-04</th>\n","      <td>24</td>\n","      <td>8</td>\n","      <td>15</td>\n","      <td>2576.359551</td>\n","      <td>3.872983</td>\n","      <td>47</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>2009-01-05</th>\n","      <td>120</td>\n","      <td>111</td>\n","      <td>141</td>\n","      <td>2576.359551</td>\n","      <td>11.874342</td>\n","      <td>372</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>2009-01-06</th>\n","      <td>261</td>\n","      <td>146</td>\n","      <td>236</td>\n","      <td>2576.359551</td>\n","      <td>15.362291</td>\n","      <td>643</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>2009-01-07</th>\n","      <td>60</td>\n","      <td>33</td>\n","      <td>80</td>\n","      <td>2576.359551</td>\n","      <td>8.944272</td>\n","      <td>173</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>2009-01-08</th>\n","      <td>24</td>\n","      <td>14</td>\n","      <td>14</td>\n","      <td>2576.359551</td>\n","      <td>3.741657</td>\n","      <td>52</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>2009-01-09</th>\n","      <td>35</td>\n","      <td>20</td>\n","      <td>32</td>\n","      <td>2576.359551</td>\n","      <td>5.656854</td>\n","      <td>87</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>2009-01-10</th>\n","      <td>81</td>\n","      <td>45</td>\n","      <td>79</td>\n","      <td>2576.359551</td>\n","      <td>8.888194</td>\n","      <td>205</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>2009-01-11</th>\n","      <td>318</td>\n","      <td>160</td>\n","      <td>306</td>\n","      <td>2576.359551</td>\n","      <td>17.492856</td>\n","      <td>784</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>2009-01-12</th>\n","      <td>105</td>\n","      <td>99</td>\n","      <td>170</td>\n","      <td>2576.359551</td>\n","      <td>13.038405</td>\n","      <td>374</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>2009-01-13</th>\n","      <td>168</td>\n","      <td>94</td>\n","      <td>172</td>\n","      <td>2576.359551</td>\n","      <td>13.114877</td>\n","      <td>434</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>2009-01-14</th>\n","      <td>145</td>\n","      <td>87</td>\n","      <td>175</td>\n","      <td>2576.359551</td>\n","      <td>13.228757</td>\n","      <td>407</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>2009-01-15</th>\n","      <td>131</td>\n","      <td>90</td>\n","      <td>172</td>\n","      <td>2576.359551</td>\n","      <td>13.114877</td>\n","      <td>393</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>2009-01-16</th>\n","      <td>93</td>\n","      <td>49</td>\n","      <td>97</td>\n","      <td>2576.359551</td>\n","      <td>9.848858</td>\n","      <td>239</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>2009-01-17</th>\n","      <td>25</td>\n","      <td>13</td>\n","      <td>20</td>\n","      <td>2576.359551</td>\n","      <td>4.472136</td>\n","      <td>58</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>2009-01-18</th>\n","      <td>52</td>\n","      <td>22</td>\n","      <td>55</td>\n","      <td>2576.359551</td>\n","      <td>7.416198</td>\n","      <td>129</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>2009-01-19</th>\n","      <td>136</td>\n","      <td>127</td>\n","      <td>202</td>\n","      <td>2576.359551</td>\n","      <td>14.212670</td>\n","      <td>465</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>2009-01-20</th>\n","      <td>147</td>\n","      <td>85</td>\n","      <td>176</td>\n","      <td>2576.359551</td>\n","      <td>13.266499</td>\n","      <td>408</td>\n","      <td>1</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["            Producto1  Producto2  Producto3  ...  Producto3sqrt  Total  month\n","Fecha                                        ...                             \n","2009-01-01         29         20         35  ...       5.916080     84      1\n","2009-01-02         19          3         22  ...       4.690416     44      1\n","2009-01-03         24         12         22  ...       4.690416     58      1\n","2009-01-04         24          8         15  ...       3.872983     47      1\n","2009-01-05        120        111        141  ...      11.874342    372      1\n","2009-01-06        261        146        236  ...      15.362291    643      1\n","2009-01-07         60         33         80  ...       8.944272    173      1\n","2009-01-08         24         14         14  ...       3.741657     52      1\n","2009-01-09         35         20         32  ...       5.656854     87      1\n","2009-01-10         81         45         79  ...       8.888194    205      1\n","2009-01-11        318        160        306  ...      17.492856    784      1\n","2009-01-12        105         99        170  ...      13.038405    374      1\n","2009-01-13        168         94        172  ...      13.114877    434      1\n","2009-01-14        145         87        175  ...      13.228757    407      1\n","2009-01-15        131         90        172  ...      13.114877    393      1\n","2009-01-16         93         49         97  ...       9.848858    239      1\n","2009-01-17         25         13         20  ...       4.472136     58      1\n","2009-01-18         52         22         55  ...       7.416198    129      1\n","2009-01-19        136        127        202  ...      14.212670    465      1\n","2009-01-20        147         85        176  ...      13.266499    408      1\n","\n","[20 rows x 7 columns]"]},"metadata":{},"execution_count":64}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":236},"id":"dLzmPUO1Px14","executionInfo":{"status":"ok","timestamp":1631989340648,"user_tz":-120,"elapsed":2329,"user":{"displayName":"MANUEL ALEJANDRO RODRIGUEZ GIRALDO","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"15792682869073318475"}},"outputId":"f714316e-f465-444d-da67-55e1038a8c25"},"source":["df.head()"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Producto1</th>\n","      <th>Producto2</th>\n","      <th>Producto3</th>\n","      <th>Producto4</th>\n","      <th>Producto3sqrt</th>\n","      <th>Total</th>\n","      <th>month</th>\n","    </tr>\n","    <tr>\n","      <th>Fecha</th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>2009-01-01</th>\n","      <td>29</td>\n","      <td>20</td>\n","      <td>35</td>\n","      <td>2576.359551</td>\n","      <td>5.916080</td>\n","      <td>84</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>2009-01-02</th>\n","      <td>19</td>\n","      <td>3</td>\n","      <td>22</td>\n","      <td>2576.359551</td>\n","      <td>4.690416</td>\n","      <td>44</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>2009-01-03</th>\n","      <td>24</td>\n","      <td>12</td>\n","      <td>22</td>\n","      <td>2576.359551</td>\n","      <td>4.690416</td>\n","      <td>58</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>2009-01-04</th>\n","      <td>24</td>\n","      <td>8</td>\n","      <td>15</td>\n","      <td>2576.359551</td>\n","      <td>3.872983</td>\n","      <td>47</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>2009-01-05</th>\n","      <td>120</td>\n","      <td>111</td>\n","      <td>141</td>\n","      <td>2576.359551</td>\n","      <td>11.874342</td>\n","      <td>372</td>\n","      <td>1</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["            Producto1  Producto2  Producto3  ...  Producto3sqrt  Total  month\n","Fecha                                        ...                             \n","2009-01-01         29         20         35  ...       5.916080     84      1\n","2009-01-02         19          3         22  ...       4.690416     44      1\n","2009-01-03         24         12         22  ...       4.690416     58      1\n","2009-01-04         24          8         15  ...       3.872983     47      1\n","2009-01-05        120        111        141  ...      11.874342    372      1\n","\n","[5 rows x 7 columns]"]},"metadata":{},"execution_count":65}]},{"cell_type":"code","metadata":{"id":"aRAVt8rUzpLY","colab":{"base_uri":"https://localhost:8080/","height":455},"executionInfo":{"status":"ok","timestamp":1631989340991,"user_tz":-120,"elapsed":16,"user":{"displayName":"MANUEL ALEJANDRO RODRIGUEZ GIRALDO","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"15792682869073318475"}},"outputId":"def1606f-97fb-42bb-f256-6e94e478660b"},"source":["df.groupby(\"month\").max()"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Producto1</th>\n","      <th>Producto2</th>\n","      <th>Producto3</th>\n","      <th>Producto4</th>\n","      <th>Producto3sqrt</th>\n","      <th>Total</th>\n","    </tr>\n","    <tr>\n","      <th>month</th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>1</th>\n","      <td>318</td>\n","      <td>160</td>\n","      <td>306</td>\n","      <td>2576.359551</td>\n","      <td>17.492856</td>\n","      <td>784</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>326</td>\n","      <td>176</td>\n","      <td>371</td>\n","      <td>2576.359551</td>\n","      <td>19.261360</td>\n","      <td>873</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>871</td>\n","      <td>484</td>\n","      <td>967</td>\n","      <td>2576.359551</td>\n","      <td>31.096624</td>\n","      <td>2322</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>4051</td>\n","      <td>2534</td>\n","      <td>3924</td>\n","      <td>2576.359551</td>\n","      <td>62.641839</td>\n","      <td>10509</td>\n","    </tr>\n","    <tr>\n","      <th>5</th>\n","      <td>5728</td>\n","      <td>3693</td>\n","      <td>5397</td>\n","      <td>2576.359551</td>\n","      <td>73.464277</td>\n","      <td>14818</td>\n","    </tr>\n","    <tr>\n","      <th>6</th>\n","      <td>6320</td>\n","      <td>4120</td>\n","      <td>6047</td>\n","      <td>2576.359551</td>\n","      <td>77.762459</td>\n","      <td>15755</td>\n","    </tr>\n","    <tr>\n","      <th>7</th>\n","      <td>6626</td>\n","      <td>4242</td>\n","      <td>5751</td>\n","      <td>7575.000000</td>\n","      <td>75.835348</td>\n","      <td>16604</td>\n","    </tr>\n","    <tr>\n","      <th>8</th>\n","      <td>5904</td>\n","      <td>3102</td>\n","      <td>5698</td>\n","      <td>7194.000000</td>\n","      <td>75.485098</td>\n","      <td>13859</td>\n","    </tr>\n","    <tr>\n","      <th>9</th>\n","      <td>5575</td>\n","      <td>2921</td>\n","      <td>6587</td>\n","      <td>7052.000000</td>\n","      <td>81.160335</td>\n","      <td>15004</td>\n","    </tr>\n","    <tr>\n","      <th>10</th>\n","      <td>3852</td>\n","      <td>1478</td>\n","      <td>4610</td>\n","      <td>2211.000000</td>\n","      <td>67.896981</td>\n","      <td>8469</td>\n","    </tr>\n","    <tr>\n","      <th>11</th>\n","      <td>2540</td>\n","      <td>1270</td>\n","      <td>3430</td>\n","      <td>1341.000000</td>\n","      <td>58.566202</td>\n","      <td>7226</td>\n","    </tr>\n","    <tr>\n","      <th>12</th>\n","      <td>1377</td>\n","      <td>711</td>\n","      <td>1867</td>\n","      <td>0.000000</td>\n","      <td>43.208795</td>\n","      <td>3955</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["       Producto1  Producto2  Producto3    Producto4  Producto3sqrt  Total\n","month                                                                    \n","1            318        160        306  2576.359551      17.492856    784\n","2            326        176        371  2576.359551      19.261360    873\n","3            871        484        967  2576.359551      31.096624   2322\n","4           4051       2534       3924  2576.359551      62.641839  10509\n","5           5728       3693       5397  2576.359551      73.464277  14818\n","6           6320       4120       6047  2576.359551      77.762459  15755\n","7           6626       4242       5751  7575.000000      75.835348  16604\n","8           5904       3102       5698  7194.000000      75.485098  13859\n","9           5575       2921       6587  7052.000000      81.160335  15004\n","10          3852       1478       4610  2211.000000      67.896981   8469\n","11          2540       1270       3430  1341.000000      58.566202   7226\n","12          1377        711       1867     0.000000      43.208795   3955"]},"metadata":{},"execution_count":66}]},{"cell_type":"code","metadata":{"id":"YzsSLl_hz9LB","colab":{"base_uri":"https://localhost:8080/","height":300},"executionInfo":{"status":"ok","timestamp":1631992673379,"user_tz":-120,"elapsed":302,"user":{"displayName":"MANUEL ALEJANDRO RODRIGUEZ GIRALDO","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"15792682869073318475"}},"outputId":"54c7d63a-fd87-475f-ef74-52ac22d4284a"},"source":["df.groupby(\"month\")[\"Producto1\"].sum().plot(kind='bar')\n","#plt.ylabel(\"Total por mes\")\n","#plt.title(\"\")\n"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["<matplotlib.axes._subplots.AxesSubplot at 0x7f75bad9ec50>"]},"metadata":{},"execution_count":127},{"output_type":"display_data","data":{"image/png":"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\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"needs_background":"light"}}]},{"cell_type":"code","metadata":{"id":"UFkYHBpIEV2t","colab":{"base_uri":"https://localhost:8080/","height":299},"executionInfo":{"status":"ok","timestamp":1631990355318,"user_tz":-120,"elapsed":231,"user":{"displayName":"MANUEL ALEJANDRO RODRIGUEZ GIRALDO","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"15792682869073318475"}},"outputId":"fed38f93-dbb8-408b-a74b-891d48873e14"},"source":["df2 = pd.DataFrame({\"Person\": [\"John\", \"Myla\", \"Lewis\", \"John\", \"Myla\", \"Lewis\", \"John\", \"Myla\"], \"Age\": [24, 55, 21, 24, 26, 43, 64, 55]})\n","df2.head(8)"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Person</th>\n","      <th>Age</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>John</td>\n","      <td>24</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>Myla</td>\n","      <td>55</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>Lewis</td>\n","      <td>21</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>John</td>\n","      <td>24</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>Myla</td>\n","      <td>26</td>\n","    </tr>\n","    <tr>\n","      <th>5</th>\n","      <td>Lewis</td>\n","      <td>43</td>\n","    </tr>\n","    <tr>\n","      <th>6</th>\n","      <td>John</td>\n","      <td>64</td>\n","    </tr>\n","    <tr>\n","      <th>7</th>\n","      <td>Myla</td>\n","      <td>55</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["  Person  Age\n","0   John   24\n","1   Myla   55\n","2  Lewis   21\n","3   John   24\n","4   Myla   26\n","5  Lewis   43\n","6   John   64\n","7   Myla   55"]},"metadata":{},"execution_count":76}]},{"cell_type":"code","metadata":{"id":"71xLKPMAAsM3","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1631990466339,"user_tz":-120,"elapsed":246,"user":{"displayName":"MANUEL ALEJANDRO RODRIGUEZ GIRALDO","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"15792682869073318475"}},"outputId":"32e0fe06-f8e6-44e2-cac2-e679de97c6de"},"source":["# Agrupar por persona y aplicar \"min\" a \"Age\"\n","#df2.groupby(\"Person\")['Age'].agg(\"min\")             \n","df2.groupby(\"Person\").Age.agg('min')\n"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["Person\n","John     24\n","Lewis    21\n","Myla     26\n","Name: Age, dtype: int64"]},"metadata":{},"execution_count":77}]},{"cell_type":"code","metadata":{"id":"mlRSIjfxGEkG","colab":{"base_uri":"https://localhost:8080/","height":268},"executionInfo":{"status":"ok","timestamp":1631990786617,"user_tz":-120,"elapsed":231,"user":{"displayName":"MANUEL ALEJANDRO RODRIGUEZ GIRALDO","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"15792682869073318475"}},"outputId":"a9aaa8f5-03f7-45f6-9bef-7a6d817eb028"},"source":["# Agrupar por persona y edad y aplicar \"count\" a \"Age\"\n","df2.groupby([\"Person\",\"Age\"]).agg({\"Person\":\"max\"})"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th></th>\n","      <th>Person</th>\n","    </tr>\n","    <tr>\n","      <th>Person</th>\n","      <th>Age</th>\n","      <th></th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th rowspan=\"2\" valign=\"top\">John</th>\n","      <th>24</th>\n","      <td>John</td>\n","    </tr>\n","    <tr>\n","      <th>64</th>\n","      <td>John</td>\n","    </tr>\n","    <tr>\n","      <th rowspan=\"2\" valign=\"top\">Lewis</th>\n","      <th>21</th>\n","      <td>Lewis</td>\n","    </tr>\n","    <tr>\n","      <th>43</th>\n","      <td>Lewis</td>\n","    </tr>\n","    <tr>\n","      <th rowspan=\"2\" valign=\"top\">Myla</th>\n","      <th>26</th>\n","      <td>Myla</td>\n","    </tr>\n","    <tr>\n","      <th>55</th>\n","      <td>Myla</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["           Person\n","Person Age       \n","John   24    John\n","       64    John\n","Lewis  21   Lewis\n","       43   Lewis\n","Myla   26    Myla\n","       55    Myla"]},"metadata":{},"execution_count":86}]},{"cell_type":"code","metadata":{"id":"98rgSQOcWudL","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1631991004733,"user_tz":-120,"elapsed":223,"user":{"displayName":"MANUEL ALEJANDRO RODRIGUEZ GIRALDO","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"15792682869073318475"}},"outputId":"84040ded-ebbd-4412-e59c-170c4bf9d739"},"source":["# frecuencia de las edades\n","a = df2['Age'].value_counts()\n","#df2[\"Age\"].value_counts(Normlize=True)\n"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["55    2\n","24    2\n","21    1\n","43    1\n","26    1\n","Name: Age, dtype: int64"]},"metadata":{},"execution_count":95}]},{"cell_type":"markdown","metadata":{"id":"Ai38-726bxxc"},"source":["<p><a name=\"renormalizacion\"></a></p>\n","\n","## 2.8. Normalización de datos\n","En algunos algoritmos de Machine Learning (ML) es importante tener los datos normalizados. Para ellos la función `scale` se encarga de normalizar los datos quedando con una media cercana a 0 y una desviación estandar de 1"]},{"cell_type":"code","metadata":{"id":"NHh3nEUv0NjS"},"source":["from sklearn import preprocessing"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"NbgMxdzfesFh"},"source":["scaled=preprocessing.scale(df[['Producto4', 'Producto3sqrt']])"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"nBfFWRQwRCHx"},"source":["scaled"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"VFbQG_5lRBo4"},"source":["df['Producto4Normalizado'] = df['Producto4']/np.max(df['Producto4'])"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"jJRbNV9CR5e7","executionInfo":{"status":"ok","timestamp":1631991605367,"user_tz":-120,"elapsed":248,"user":{"displayName":"MANUEL ALEJANDRO RODRIGUEZ GIRALDO","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"15792682869073318475"}},"outputId":"77f272df-1a38-47a0-c378-c72eba8c7de5"},"source":["np.max(df['Producto4'])"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["7575.0"]},"metadata":{},"execution_count":104}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":236},"id":"rnZh92ijRj7j","executionInfo":{"status":"ok","timestamp":1631991592715,"user_tz":-120,"elapsed":233,"user":{"displayName":"MANUEL ALEJANDRO RODRIGUEZ GIRALDO","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"15792682869073318475"}},"outputId":"9a1f6da8-5cb8-405b-bde9-78b1deee30f7"},"source":["df.head()"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Producto1</th>\n","      <th>Producto2</th>\n","      <th>Producto3</th>\n","      <th>Producto4</th>\n","      <th>Producto3sqrt</th>\n","      <th>Total</th>\n","      <th>month</th>\n","      <th>Producto4Normalizado</th>\n","    </tr>\n","    <tr>\n","      <th>Fecha</th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>2009-01-01</th>\n","      <td>29</td>\n","      <td>20</td>\n","      <td>35</td>\n","      <td>2576.359551</td>\n","      <td>35.0</td>\n","      <td>84</td>\n","      <td>1</td>\n","      <td>0.340113</td>\n","    </tr>\n","    <tr>\n","      <th>2009-01-02</th>\n","      <td>19</td>\n","      <td>3</td>\n","      <td>22</td>\n","      <td>2576.359551</td>\n","      <td>22.0</td>\n","      <td>44</td>\n","      <td>1</td>\n","      <td>0.340113</td>\n","    </tr>\n","    <tr>\n","      <th>2009-01-03</th>\n","      <td>24</td>\n","      <td>12</td>\n","      <td>22</td>\n","      <td>2576.359551</td>\n","      <td>22.0</td>\n","      <td>58</td>\n","      <td>1</td>\n","      <td>0.340113</td>\n","    </tr>\n","    <tr>\n","      <th>2009-01-04</th>\n","      <td>24</td>\n","      <td>8</td>\n","      <td>15</td>\n","      <td>2576.359551</td>\n","      <td>15.0</td>\n","      <td>47</td>\n","      <td>1</td>\n","      <td>0.340113</td>\n","    </tr>\n","    <tr>\n","      <th>2009-01-05</th>\n","      <td>120</td>\n","      <td>111</td>\n","      <td>141</td>\n","      <td>2576.359551</td>\n","      <td>141.0</td>\n","      <td>372</td>\n","      <td>1</td>\n","      <td>0.340113</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["            Producto1  Producto2  Producto3  ...  Total  month  Producto4Normalizado\n","Fecha                                        ...                                    \n","2009-01-01         29         20         35  ...     84      1              0.340113\n","2009-01-02         19          3         22  ...     44      1              0.340113\n","2009-01-03         24         12         22  ...     58      1              0.340113\n","2009-01-04         24          8         15  ...     47      1              0.340113\n","2009-01-05        120        111        141  ...    372      1              0.340113\n","\n","[5 rows x 8 columns]"]},"metadata":{},"execution_count":103}]},{"cell_type":"code","metadata":{"id":"bvMavsQrbw-I"},"source":["preprocessing.scale?"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"IPE1WrsecqgP","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1631991980271,"user_tz":-120,"elapsed":239,"user":{"displayName":"MANUEL ALEJANDRO RODRIGUEZ GIRALDO","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"15792682869073318475"}},"outputId":"91ab2e37-7204-4076-b51c-7a2fc137d634"},"source":["scaled.shape"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["(365, 2)"]},"metadata":{},"execution_count":109}]},{"cell_type":"code","metadata":{"id":"3VGOA0sEcrae"},"source":["scaled.mean(axis=1)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"TCYzJoeFdH9G"},"source":["scaled.std(axis=1)"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"nrfjXjHSebwk"},"source":["<p><a name=\"bineado\"></a></p>\n","\n","## 2.9. Bineado de datos\n","La función `cut` nos permite separar los datos en bloques (bins)"]},{"cell_type":"code","metadata":{"id":"tO7iwmdJfTTy","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1631992310605,"user_tz":-120,"elapsed":273,"user":{"displayName":"MANUEL ALEJANDRO RODRIGUEZ GIRALDO","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"15792682869073318475"}},"outputId":"e4aa364a-e812-4b3d-9ddf-008e37f90b00"},"source":["df.Producto1[:10]"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["Fecha\n","2009-01-01     29\n","2009-01-02     19\n","2009-01-03     24\n","2009-01-04     24\n","2009-01-05    120\n","2009-01-06    261\n","2009-01-07     60\n","2009-01-08     24\n","2009-01-09     35\n","2009-01-10     81\n","Name: Producto1, dtype: int64"]},"metadata":{},"execution_count":114}]},{"cell_type":"markdown","metadata":{"id":"fZcu4dM8qILP"},"source":["Se puede seleccionar el número de bins deseado y el programa obtiene la distribución óptima de los mismos"]},{"cell_type":"code","metadata":{"id":"Y5_LO951ega1","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1631992337234,"user_tz":-120,"elapsed":881,"user":{"displayName":"MANUEL ALEJANDRO RODRIGUEZ GIRALDO","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"15792682869073318475"}},"outputId":"426369f3-8e24-4d2d-f9fc-c43e2e416ef2"},"source":["pd.cut(df.Producto1[:], bins=3)"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["Fecha\n","2009-01-01    (-6.626, 2208.667]\n","2009-01-02    (-6.626, 2208.667]\n","2009-01-03    (-6.626, 2208.667]\n","2009-01-04    (-6.626, 2208.667]\n","2009-01-05    (-6.626, 2208.667]\n","                     ...        \n","2009-12-27    (-6.626, 2208.667]\n","2009-12-28    (-6.626, 2208.667]\n","2009-12-29    (-6.626, 2208.667]\n","2009-12-30    (-6.626, 2208.667]\n","2009-12-31    (-6.626, 2208.667]\n","Name: Producto1, Length: 365, dtype: category\n","Categories (3, interval[float64]): [(-6.626, 2208.667] < (2208.667, 4417.333] < (4417.333, 6626.0]]"]},"metadata":{},"execution_count":115}]},{"cell_type":"markdown","metadata":{"id":"tR3M7j8fqRTG"},"source":["Se puede seleccionar los intervalos de los bins deseados"]},{"cell_type":"code","metadata":{"id":"1OSXunBefNjG"},"source":["h=pd.cut(df.Producto1[:],bins=[0,100,200,700])"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"W0zrlooHQu8H","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1631992434595,"user_tz":-120,"elapsed":486,"user":{"displayName":"MANUEL ALEJANDRO RODRIGUEZ GIRALDO","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"15792682869073318475"}},"outputId":"c05f20ec-97e1-43da-acff-16ff3c124b7c"},"source":["print(h)"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Fecha\n","2009-01-01      (0, 100]\n","2009-01-02      (0, 100]\n","2009-01-03      (0, 100]\n","2009-01-04      (0, 100]\n","2009-01-05    (100, 200]\n","                 ...    \n","2009-12-27      (0, 100]\n","2009-12-28      (0, 100]\n","2009-12-29      (0, 100]\n","2009-12-30      (0, 100]\n","2009-12-31      (0, 100]\n","Name: Producto1, Length: 365, dtype: category\n","Categories (3, interval[int64]): [(0, 100] < (100, 200] < (200, 700]]\n"]}]},{"cell_type":"code","metadata":{"id":"M4thqzotQMEs"},"source":["pd.cut?"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"J8E-DXXWrn3v"},"source":["Se pueden poner etiquetas sobre los bins"]},{"cell_type":"code","metadata":{"id":"pZwv60b1rm-E"},"source":["y= pd.cut(df.Producto1[:],bins=3, labels=['bajo','medio','alto'])"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"YlHXFOn8VeFY"},"source":["y = pd.DataFrame(y)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":454},"id":"W8IxJKN7Vojj","executionInfo":{"status":"ok","timestamp":1631992583745,"user_tz":-120,"elapsed":271,"user":{"displayName":"MANUEL ALEJANDRO RODRIGUEZ GIRALDO","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"15792682869073318475"}},"outputId":"db7a326e-3a77-4518-db65-36ab3e5a8e61"},"source":["y"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Producto1</th>\n","    </tr>\n","    <tr>\n","      <th>Fecha</th>\n","      <th></th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>2009-01-01</th>\n","      <td>bajo</td>\n","    </tr>\n","    <tr>\n","      <th>2009-01-02</th>\n","      <td>bajo</td>\n","    </tr>\n","    <tr>\n","      <th>2009-01-03</th>\n","      <td>bajo</td>\n","    </tr>\n","    <tr>\n","      <th>2009-01-04</th>\n","      <td>bajo</td>\n","    </tr>\n","    <tr>\n","      <th>2009-01-05</th>\n","      <td>bajo</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>2009-12-27</th>\n","      <td>bajo</td>\n","    </tr>\n","    <tr>\n","      <th>2009-12-28</th>\n","      <td>bajo</td>\n","    </tr>\n","    <tr>\n","      <th>2009-12-29</th>\n","      <td>bajo</td>\n","    </tr>\n","    <tr>\n","      <th>2009-12-30</th>\n","      <td>bajo</td>\n","    </tr>\n","    <tr>\n","      <th>2009-12-31</th>\n","      <td>bajo</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>365 rows × 1 columns</p>\n","</div>"],"text/plain":["           Producto1\n","Fecha               \n","2009-01-01      bajo\n","2009-01-02      bajo\n","2009-01-03      bajo\n","2009-01-04      bajo\n","2009-01-05      bajo\n","...              ...\n","2009-12-27      bajo\n","2009-12-28      bajo\n","2009-12-29      bajo\n","2009-12-30      bajo\n","2009-12-31      bajo\n","\n","[365 rows x 1 columns]"]},"metadata":{},"execution_count":126}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":266},"id":"1sdIGkY4YEMn","executionInfo":{"status":"ok","timestamp":1631993425314,"user_tz":-120,"elapsed":465,"user":{"displayName":"MANUEL ALEJANDRO RODRIGUEZ GIRALDO","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"15792682869073318475"}},"outputId":"fe6523a7-25f9-4a2c-9979-585087ccd722"},"source":["y.groupby('Producto1')['Producto1'].count().plot(kind='pie')"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["<matplotlib.axes._subplots.AxesSubplot at 0x7f75ba1b1190>"]},"metadata":{},"execution_count":133},{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{}}]},{"cell_type":"markdown","metadata":{"id":"fBvOlZqSsMz5"},"source":["<p><a name=\"concom\"></a></p>\n","\n","## 2.10. Concatenación y combinación de dataframes\n","\n","La concatenación se realiza mediante la función `concat()` y la combinación mediante la función `merge()`"]},{"cell_type":"code","metadata":{"id":"kxTLE1_0sL-B"},"source":["raw_data_1 = {\n","        'subject_id': ['1', '2', '3', '4', '5'],\n","        'first_name': ['Alex', 'Amy', 'Allen', 'Alice', 'Ayoung'], \n","        'last_name': ['Anderson', 'Ackerman', 'Ali', 'Aoni', 'Atiches']}\n","\n","raw_data_2 = {\n","        'subject_id': ['4', '5', '6', '7', '8'],\n","        'first_name': ['Billy', 'Brian', 'Bran', 'Bryce', 'Betty'], \n","        'last_name': ['Bonder', 'Black', 'Balwner', 'Brice', 'Btisan']}\n","\n","raw_data_3 = {\n","        'subject_id': ['1', '2', '3', '4', '5', '7', '8', '9', '10', '11'],\n","        'test_id': [51, 15, 15, 61, 16, 14, 15, 1, 61, 16]}\n","\n","data1 = pd.DataFrame(raw_data_1, columns = ['subject_id', 'first_name', 'last_name'])\n","data2 = pd.DataFrame(raw_data_2, columns = ['subject_id', 'first_name', 'last_name'])\n","data3 = pd.DataFrame(raw_data_3, columns = ['subject_id','test_id'])"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"pVE5wKz3zHuT","colab":{"base_uri":"https://localhost:8080/","height":205},"executionInfo":{"status":"ok","timestamp":1631993571000,"user_tz":-120,"elapsed":21,"user":{"displayName":"MANUEL ALEJANDRO RODRIGUEZ GIRALDO","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"15792682869073318475"}},"outputId":"c06c7f56-6254-43bb-f6e7-3ba69bd60f21"},"source":["data1"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>subject_id</th>\n","      <th>first_name</th>\n","      <th>last_name</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>1</td>\n","      <td>Alex</td>\n","      <td>Anderson</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>2</td>\n","      <td>Amy</td>\n","      <td>Ackerman</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>3</td>\n","      <td>Allen</td>\n","      <td>Ali</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>4</td>\n","      <td>Alice</td>\n","      <td>Aoni</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>5</td>\n","      <td>Ayoung</td>\n","      <td>Atiches</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["  subject_id first_name last_name\n","0          1       Alex  Anderson\n","1          2        Amy  Ackerman\n","2          3      Allen       Ali\n","3          4      Alice      Aoni\n","4          5     Ayoung   Atiches"]},"metadata":{},"execution_count":135}]},{"cell_type":"code","metadata":{"id":"sE-lGcN0zIjf","colab":{"base_uri":"https://localhost:8080/","height":205},"executionInfo":{"status":"ok","timestamp":1631993582471,"user_tz":-120,"elapsed":226,"user":{"displayName":"MANUEL ALEJANDRO RODRIGUEZ GIRALDO","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"15792682869073318475"}},"outputId":"00d94934-7254-4aee-8092-64bde987601e"},"source":["data2"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>subject_id</th>\n","      <th>first_name</th>\n","      <th>last_name</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>4</td>\n","      <td>Billy</td>\n","      <td>Bonder</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>5</td>\n","      <td>Brian</td>\n","      <td>Black</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>6</td>\n","      <td>Bran</td>\n","      <td>Balwner</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>7</td>\n","      <td>Bryce</td>\n","      <td>Brice</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>8</td>\n","      <td>Betty</td>\n","      <td>Btisan</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["  subject_id first_name last_name\n","0          4      Billy    Bonder\n","1          5      Brian     Black\n","2          6       Bran   Balwner\n","3          7      Bryce     Brice\n","4          8      Betty    Btisan"]},"metadata":{},"execution_count":136}]},{"cell_type":"code","metadata":{"id":"9qtu39UazJkw","colab":{"base_uri":"https://localhost:8080/","height":362},"executionInfo":{"status":"ok","timestamp":1631993591723,"user_tz":-120,"elapsed":568,"user":{"displayName":"MANUEL ALEJANDRO RODRIGUEZ GIRALDO","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"15792682869073318475"}},"outputId":"d493a416-1779-49b2-d934-6449961f34b8"},"source":["data3"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>subject_id</th>\n","      <th>test_id</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>1</td>\n","      <td>51</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>2</td>\n","      <td>15</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>3</td>\n","      <td>15</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>4</td>\n","      <td>61</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>5</td>\n","      <td>16</td>\n","    </tr>\n","    <tr>\n","      <th>5</th>\n","      <td>7</td>\n","      <td>14</td>\n","    </tr>\n","    <tr>\n","      <th>6</th>\n","      <td>8</td>\n","      <td>15</td>\n","    </tr>\n","    <tr>\n","      <th>7</th>\n","      <td>9</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>8</th>\n","      <td>10</td>\n","      <td>61</td>\n","    </tr>\n","    <tr>\n","      <th>9</th>\n","      <td>11</td>\n","      <td>16</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["  subject_id  test_id\n","0          1       51\n","1          2       15\n","2          3       15\n","3          4       61\n","4          5       16\n","5          7       14\n","6          8       15\n","7          9        1\n","8         10       61\n","9         11       16"]},"metadata":{},"execution_count":137}]},{"cell_type":"code","metadata":{"id":"-RV6NPalzKlF"},"source":[""],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"vbHWFPRRsmNI","colab":{"base_uri":"https://localhost:8080/","height":362},"executionInfo":{"status":"ok","timestamp":1631993879459,"user_tz":-120,"elapsed":256,"user":{"displayName":"MANUEL ALEJANDRO RODRIGUEZ GIRALDO","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"15792682869073318475"}},"outputId":"b67f104f-a056-4be8-e918-96585cddcf79"},"source":["# Concatenar por filas\n","all_data = pd.concat([data1, data2])\n","all_data\n"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>subject_id</th>\n","      <th>first_name</th>\n","      <th>last_name</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>1</td>\n","      <td>Alex</td>\n","      <td>Anderson</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>2</td>\n","      <td>Amy</td>\n","      <td>Ackerman</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>3</td>\n","      <td>Allen</td>\n","      <td>Ali</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>4</td>\n","      <td>Alice</td>\n","      <td>Aoni</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>5</td>\n","      <td>Ayoung</td>\n","      <td>Atiches</td>\n","    </tr>\n","    <tr>\n","      <th>0</th>\n","      <td>4</td>\n","      <td>Billy</td>\n","      <td>Bonder</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>5</td>\n","      <td>Brian</td>\n","      <td>Black</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>6</td>\n","      <td>Bran</td>\n","      <td>Balwner</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>7</td>\n","      <td>Bryce</td>\n","      <td>Brice</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>8</td>\n","      <td>Betty</td>\n","      <td>Btisan</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["  subject_id first_name last_name\n","0          1       Alex  Anderson\n","1          2        Amy  Ackerman\n","2          3      Allen       Ali\n","3          4      Alice      Aoni\n","4          5     Ayoung   Atiches\n","0          4      Billy    Bonder\n","1          5      Brian     Black\n","2          6       Bran   Balwner\n","3          7      Bryce     Brice\n","4          8      Betty    Btisan"]},"metadata":{},"execution_count":141}]},{"cell_type":"code","metadata":{"id":"4koHlxR0tA4l","colab":{"base_uri":"https://localhost:8080/","height":205},"executionInfo":{"status":"ok","timestamp":1631993721224,"user_tz":-120,"elapsed":242,"user":{"displayName":"MANUEL ALEJANDRO RODRIGUEZ GIRALDO","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"15792682869073318475"}},"outputId":"5c8ca207-ac8a-454f-df74-4091747bd6fd"},"source":["# Concatenar por columnas\n","all_data_col = pd.concat([data1, data2], axis = 1)\n","all_data_col"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>subject_id</th>\n","      <th>first_name</th>\n","      <th>last_name</th>\n","      <th>subject_id</th>\n","      <th>first_name</th>\n","      <th>last_name</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>1</td>\n","      <td>Alex</td>\n","      <td>Anderson</td>\n","      <td>4</td>\n","      <td>Billy</td>\n","      <td>Bonder</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>2</td>\n","      <td>Amy</td>\n","      <td>Ackerman</td>\n","      <td>5</td>\n","      <td>Brian</td>\n","      <td>Black</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>3</td>\n","      <td>Allen</td>\n","      <td>Ali</td>\n","      <td>6</td>\n","      <td>Bran</td>\n","      <td>Balwner</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>4</td>\n","      <td>Alice</td>\n","      <td>Aoni</td>\n","      <td>7</td>\n","      <td>Bryce</td>\n","      <td>Brice</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>5</td>\n","      <td>Ayoung</td>\n","      <td>Atiches</td>\n","      <td>8</td>\n","      <td>Betty</td>\n","      <td>Btisan</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["  subject_id first_name last_name subject_id first_name last_name\n","0          1       Alex  Anderson          4      Billy    Bonder\n","1          2        Amy  Ackerman          5      Brian     Black\n","2          3      Allen       Ali          6       Bran   Balwner\n","3          4      Alice      Aoni          7      Bryce     Brice\n","4          5     Ayoung   Atiches          8      Betty    Btisan"]},"metadata":{},"execution_count":139}]},{"cell_type":"code","metadata":{"id":"RGbNfQvis92d","colab":{"base_uri":"https://localhost:8080/","height":331},"executionInfo":{"status":"ok","timestamp":1631994017484,"user_tz":-120,"elapsed":262,"user":{"displayName":"MANUEL ALEJANDRO RODRIGUEZ GIRALDO","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"15792682869073318475"}},"outputId":"fe9cf371-2ef6-4f5c-8222-dd89a3f1fcbb"},"source":["# Combinar all_data y data3 a lo largo del valor de subject_id\n","pd.merge(all_data, data3, on='subject_id')"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>subject_id</th>\n","      <th>first_name</th>\n","      <th>last_name</th>\n","      <th>test_id</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>1</td>\n","      <td>Alex</td>\n","      <td>Anderson</td>\n","      <td>51</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>2</td>\n","      <td>Amy</td>\n","      <td>Ackerman</td>\n","      <td>15</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>3</td>\n","      <td>Allen</td>\n","      <td>Ali</td>\n","      <td>15</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>4</td>\n","      <td>Alice</td>\n","      <td>Aoni</td>\n","      <td>61</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>4</td>\n","      <td>Billy</td>\n","      <td>Bonder</td>\n","      <td>61</td>\n","    </tr>\n","    <tr>\n","      <th>5</th>\n","      <td>5</td>\n","      <td>Ayoung</td>\n","      <td>Atiches</td>\n","      <td>16</td>\n","    </tr>\n","    <tr>\n","      <th>6</th>\n","      <td>5</td>\n","      <td>Brian</td>\n","      <td>Black</td>\n","      <td>16</td>\n","    </tr>\n","    <tr>\n","      <th>7</th>\n","      <td>7</td>\n","      <td>Bryce</td>\n","      <td>Brice</td>\n","      <td>14</td>\n","    </tr>\n","    <tr>\n","      <th>8</th>\n","      <td>8</td>\n","      <td>Betty</td>\n","      <td>Btisan</td>\n","      <td>15</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["  subject_id first_name last_name  test_id\n","0          1       Alex  Anderson       51\n","1          2        Amy  Ackerman       15\n","2          3      Allen       Ali       15\n","3          4      Alice      Aoni       61\n","4          4      Billy    Bonder       61\n","5          5     Ayoung   Atiches       16\n","6          5      Brian     Black       16\n","7          7      Bryce     Brice       14\n","8          8      Betty    Btisan       15"]},"metadata":{},"execution_count":142}]},{"cell_type":"code","metadata":{"id":"h7UW_E-BthxT","colab":{"base_uri":"https://localhost:8080/","height":112},"executionInfo":{"status":"ok","timestamp":1631994063941,"user_tz":-120,"elapsed":246,"user":{"displayName":"MANUEL ALEJANDRO RODRIGUEZ GIRALDO","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"15792682869073318475"}},"outputId":"4b4a4c72-5cf4-42f8-c6f0-cc644978af05"},"source":["# Combinar solo los datos que tienen el mismo 'subject_id' en data1 y data2 (interseccion)\n","pd.merge(data1, data2, on='subject_id', how='inner')"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>subject_id</th>\n","      <th>first_name_x</th>\n","      <th>last_name_x</th>\n","      <th>first_name_y</th>\n","      <th>last_name_y</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>4</td>\n","      <td>Alice</td>\n","      <td>Aoni</td>\n","      <td>Billy</td>\n","      <td>Bonder</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>5</td>\n","      <td>Ayoung</td>\n","      <td>Atiches</td>\n","      <td>Brian</td>\n","      <td>Black</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["  subject_id first_name_x last_name_x first_name_y last_name_y\n","0          4        Alice        Aoni        Billy      Bonder\n","1          5       Ayoung     Atiches        Brian       Black"]},"metadata":{},"execution_count":143}]},{"cell_type":"code","metadata":{"id":"BQqrG4TitxYg","colab":{"base_uri":"https://localhost:8080/","height":299},"executionInfo":{"status":"ok","timestamp":1631994084161,"user_tz":-120,"elapsed":227,"user":{"displayName":"MANUEL ALEJANDRO RODRIGUEZ GIRALDO","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"15792682869073318475"}},"outputId":"a6b29769-9741-4cb7-c315-ba98dcd97e16"},"source":["# Combinar solo los datos que tienen el mismo 'subject_id' en data1 y data2 (union)\n","pd.merge(data1, data2, on=['subject_id',], how='outer')\n","\n"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>subject_id</th>\n","      <th>first_name_x</th>\n","      <th>last_name_x</th>\n","      <th>first_name_y</th>\n","      <th>last_name_y</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>1</td>\n","      <td>Alex</td>\n","      <td>Anderson</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>2</td>\n","      <td>Amy</td>\n","      <td>Ackerman</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>3</td>\n","      <td>Allen</td>\n","      <td>Ali</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>4</td>\n","      <td>Alice</td>\n","      <td>Aoni</td>\n","      <td>Billy</td>\n","      <td>Bonder</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>5</td>\n","      <td>Ayoung</td>\n","      <td>Atiches</td>\n","      <td>Brian</td>\n","      <td>Black</td>\n","    </tr>\n","    <tr>\n","      <th>5</th>\n","      <td>6</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>Bran</td>\n","      <td>Balwner</td>\n","    </tr>\n","    <tr>\n","      <th>6</th>\n","      <td>7</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>Bryce</td>\n","      <td>Brice</td>\n","    </tr>\n","    <tr>\n","      <th>7</th>\n","      <td>8</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>Betty</td>\n","      <td>Btisan</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["  subject_id first_name_x last_name_x first_name_y last_name_y\n","0          1         Alex    Anderson          NaN         NaN\n","1          2          Amy    Ackerman          NaN         NaN\n","2          3        Allen         Ali          NaN         NaN\n","3          4        Alice        Aoni        Billy      Bonder\n","4          5       Ayoung     Atiches        Brian       Black\n","5          6          NaN         NaN         Bran     Balwner\n","6          7          NaN         NaN        Bryce       Brice\n","7          8          NaN         NaN        Betty      Btisan"]},"metadata":{},"execution_count":144}]},{"cell_type":"code","metadata":{"id":"Uwc1A6SC0zbC"},"source":["pd.merge?"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"EIbJya3y6WbV"},"source":["set()"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"O2ehaErhoIav"},"source":["<p><a name=\"tallpan\"></a></p>\n","\n","## 3. Taller Pandas"]},{"cell_type":"markdown","metadata":{"id":"yz3mwAY5mdCi"},"source":["### Ejercicio 1 \n","\n","Cargue el dataset provisto en la dirección 'https://pynative.com/wp-content/uploads/2019/01/company_sales_data.csv'  grafique la ganancia total (total_profit) para todos los meses. La gráfica debe tener las siguientes propiedades:\n","\n","* El estilo de línea punteado y de color rojo \n","* Mostrar la legenda (legend) en la parte inferior derecha\n","* X label name = Month Number\n","* Y label name = Profits in dollars\n","* Título : Company sales data of last year\n","* Los markers deben ser circulares y de color negro\n","* El grosor de la línea debe ser 3\n","\n","Solución esperada:\n","<p><img  height=\"260px\" src=\"https://pynative.com/wp-content/uploads/2019/01/matplotlib_and_pandas_exercise_2_plot_style_properties-768x512.png\" align=\"center\" hspace=\"10px\" vspace=\"0px\"></p>"]},{"cell_type":"markdown","metadata":{"id":"FmT4jjbmmqFq"},"source":["Para ver la solución haga double-click <b>aquí</b>.\n","<!--\n","\n","import pandas as pd\n","import matplotlib.pyplot as plt  \n","df = pd.read_csv('https://pynative.com/wp-content/uploads/2019/01/company_sales_data.csv')\n","profitList = df ['total_profit'].tolist()\n","monthList  = df ['month_number'].tolist()\n","plt.plot(monthList, profitList, label = 'Profit data of last year', \n","      color='r', marker='o', markerfacecolor='k', \n","      linestyle='--', linewidth=3)\n","      \n","plt.xlabel('Month Number')\n","plt.ylabel('Profit in dollar')\n","plt.legend(loc='lower right')\n","plt.title('Company Sales data of last year')\n","plt.xticks(monthList)\n","plt.yticks([100000, 200000, 300000, 400000, 500000])\n","plt.show()\n","-->"]},{"cell_type":"code","metadata":{"id":"Md3iI5TJuH87"},"source":["import pandas as pd\n","import matplotlib.pyplot as plt  \n","df = pd.read_csv('https://pynative.com/wp-content/uploads/2019/01/company_sales_data.csv')\n","profitList = df ['total_profit'].tolist()\n","monthList  = df ['month_number'].tolist()\n","plt.plot(monthList, profitList, label = 'Profit data of last year', \n","      color='r', marker='o', markerfacecolor='k', \n","      linestyle='--', linewidth=3)\n","      \n","plt.xlabel('Month Number')\n","plt.ylabel('Profit in dollar')\n","plt.legend(loc='lower right')\n","plt.title('Company Sales data of last year')\n","plt.xticks(monthList)\n","plt.yticks([100000, 200000, 300000, 400000, 500000])\n","plt.show()"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"es-m65sEpb7b"},"source":["### Ejercicio 2\n","\n","Dataset: https://raw.githubusercontent.com/justmarkham/DAT8/master/data/u.user\n","\n","1. Importar el dataset, asignarlo a una variable llamada *users* y usar el *user_id* como índice.\n","2. ¿Cuál es el número de observaciones y columnas en el dataset? \n","3. Mostrar el nombre de las columnas y el tipo de dato que contiene.\n","4. Mostrar la indexación del dataset.\n","5. ¿Cuántas ocupaciones diferentes hay en este conjunto de datos?\n","6. ¿Cuál es la ocupación más frecuente?\n","7. ¿Cuál es la edad media de los usuarios?\n","8. ¿Cuál es la edad con menos ocurrencia?\n"]},{"cell_type":"markdown","metadata":{"id":"Wuwt_G1GpbN_"},"source":["Para ver la solución haga double-click <b>aquí</b>.\n","<!--\n","\n","1. \n","\n","import pandas as pd\n","\n","users = pd.read_csv('https://raw.githubusercontent.com/justmarkham/DAT8/master/data/u.user', delimiter='|', index_col='user_id')\n","users.head()\n","  \n","2.\n","print(\"Número de observaciones:\",users.shape[0])\n","print(\"Número de columnas: \",users.shape[1])\n","\n","3.\n","print(\"Columnas: \",users.columns)\n","print(\"Tipo de datos: \\n\",users.dtypes)\n","\n","4.\n","print(\"Indexación: \",users.index)\n","\n","5.\n","print(\"Número de ocupaciones diferentes:\",users.occupation.nunique())\n","\n","6.\n","print(\"Ocupaciones más frecuentes:\\n\",users.occupation.value_counts().head())\n","\n","7.\n","print(\"Edad media de los usuarios:\",round(users.age.mean()))\n","\n","8.\n","print(\"Edades de menos ocurrencia:\\n\",users.age.value_counts().tail(10))\n","\n","-->"]},{"cell_type":"markdown","metadata":{"id":"pCX-t7lsuSVv"},"source":["### Ejercicio 3"]},{"cell_type":"markdown","metadata":{"id":"brSEH5NbyWwA"},"source":["Diccionario dado:\n","\n","raw_data = {'regiment': ['Nighthawks', 'Nighthawks', 'Nighthawks', 'Nighthawks', 'Dragoons', 'Dragoons', 'Dragoons', 'Dragoons', 'Scouts', 'Scouts', 'Scouts', 'Scouts'],\n","            'company': ['1st', '1st', '2nd', '2nd', '1st', '1st', '2nd', '2nd','1st', '1st', '2nd', '2nd'],\n","            'deaths': [523, 52, 25, 616, 43, 234, 523, 62, 62, 73, 37, 35],\n","            'battles': [5, 42, 2, 2, 4, 7, 8, 3, 4, 7, 8, 9],\n","            'size': [1045, 957, 1099, 1400, 1592, 1006, 987, 849, 973, 1005, 1099, 1523],\n","            'veterans': [1, 5, 62, 26, 73, 37, 949, 48, 48, 435, 63, 345],\n","            'readiness': [1, 2, 3, 3, 2, 1, 2, 3, 2, 1, 2, 3],\n","            'armored': [1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1],\n","            'deserters': [4, 24, 31, 2, 3, 4, 24, 31, 2, 3, 2, 3],\n","            'origin': ['Arizona', 'California', 'Texas', 'Florida', 'Maine', 'Iowa', 'Alaska', 'Washington', 'Oregon', 'Wyoming', 'Louisana', 'Georgia']}\n","            \n","1. Crea un DataFrame llamado *army* a partir del diccionario dado \n","\n","(No olvide incluir los nombres de las columnas en el orden presentado en el diccionario ('regimen', 'company', ...) para que el orden del índice de la columna sea coherente con las soluciones. Si se omite, Pandas ordenará las columnas alfabéticamente.\n","\n","2. Establezca la columna 'origin' como índice del dataset.\n","3. Imprima las columnas 'veterans' y 'deaths'\n","4. Seleccione las columnas 'deaths', 'size' y 'deserters' de Maine a Alaska.\n","5. Seleccione la tercera columna hasta la séptima columna.\n","6. Seleccione las filas donde *deaths* sea mayor que 50.\n","7. Seleccione las filas donde *deaths* sea mayor que 500 o menor que 50.\n","8. Selecciona todos los *regiments* no nombrados *Dragoons*.\n","9. Seleccione la tercera celda en la fila llamada *Arizona*\n","10. Seleccione la tercera celda en la columna llamada *deaths*\n"]},{"cell_type":"markdown","metadata":{"id":"gTBNeJy0yQFB"},"source":["Para ver la solución haga double-click <b>aquí</b>.\n","<!--\n","1.\n","raw_data = {'regiment': ['Nighthawks', 'Nighthawks', 'Nighthawks', 'Nighthawks', 'Dragoons', 'Dragoons', 'Dragoons', 'Dragoons', 'Scouts', 'Scouts', 'Scouts', 'Scouts'], 'company': ['1st', '1st', '2nd', '2nd', '1st', '1st', '2nd', '2nd','1st', '1st', '2nd', '2nd'], 'deaths': [523, 52, 25, 616, 43, 234, 523, 62, 62, 73, 37, 35], 'battles': [5, 42, 2, 2, 4, 7, 8, 3, 4, 7, 8, 9], 'size': [1045, 957, 1099, 1400, 1592, 1006, 987, 849, 973, 1005, 1099, 1523], 'veterans': [1, 5, 62, 26, 73, 37, 949, 48, 48, 435, 63, 345], 'readiness': [1, 2, 3, 3, 2, 1, 2, 3, 2, 1, 2, 3], 'armored': [1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1], 'deserters': [4, 24, 31, 2, 3, 4, 24, 31, 2, 3, 2, 3], 'origin': ['Arizona', 'California', 'Texas', 'Florida', 'Maine', 'Iowa', 'Alaska', 'Washington', 'Oregon', 'Wyoming', 'Louisana', 'Georgia']}\n","\n","army = pd.DataFrame(raw_data, columns = ['regiment', 'company', 'deaths', 'battles', 'size', 'veterans', 'readiness', 'armored', 'deserters', 'origin'])\n","\n","army.head()\n","\n","2.\n","army = army.set_index(\"origin\")\n","army.head()\n","\n","3. \n","army[['veterans', 'deaths']]\n","\n","4.\n","army.loc[['Maine','Alaska'] , [\"deaths\",\"size\",\"deserters\"]]\n","\n","5.\n","army.iloc[: , 4:7]\n","\n","6.\n","army[army['deaths'] > 50]\n","\n","7. \n","army[(army['deaths'] > 500) | (army['deaths'] < 50)]\n","\n","8.\n","army[(army['regiment'] != 'Dragoons')]\n","\n","9.\n","army.loc[['Arizona'], ['deaths']]\n","\n","#O\n","\n","#army.iloc[[0]\n","\n","10.\n","army.loc['Texas', 'deaths']\n","\n","#O\n","\n","#army.iloc[[2]\n","\n","\n","-->"]},{"cell_type":"markdown","metadata":{"id":"2uqS7sNd8_Fk"},"source":["### Ejercicio 4\n","\n","Dataset: https://raw.githubusercontent.com/justmarkham/DAT8/master/data/u.user\n","\n","1.  Importar el dataset, asignarlo a una variable llamada *users* y usar el *user_id* como índice.\n","2. ¿Cuál es la edad media por ocupación?\n","3. Descubra la proporción de hombres por ocupación y clasifíquela de mayor a menor (cree una columna).\n","4. Para cada ocupación calcule las edades mínimas y máximas.\n","5. Para cada combinación de ocupación y género calcule la edad media.\n","6. Para cada ocupación muestre el porcentaje de mujeres y hombres."]},{"cell_type":"markdown","metadata":{"id":"TVbi8B-a-gZ9"},"source":["Para ver la solución haga double-click <b>aquí</b>.\n","<!--\n","\n","1. \n","\n","import pandas as pd\n","\n","users = pd.read_csv('https://raw.githubusercontent.com/justmarkham/DAT8/master/data/u.user', delimiter='|', index_col='user_id')\n","users.head()\n","  \n","2.\n","users.groupby('occupation').age.mean()\n","\n","3.\n","# funcion que mapea el genero a un numero\n","def gender_to_numeric(x):\n","    if x == 'M':\n","        return 1\n","    if x == 'F':\n","        return 0\n","\n","# aplica la funcion a la columna genero y saca el porcentaje de hombres por ocupacion\n","users['gender_n'] = users['gender'].apply(gender_to_numeric)\n","\n","# se \n","a = users.groupby('occupation').gender_n.sum() / users.occupation.value_counts() * 100 \n","\n","# ordenamiento de mayor a menor\n","a.sort_values(ascending = False)\n","\n","4.\n","users.groupby('occupation').age.agg(['min', 'max'])\n","\n","5.\n","users.groupby(['occupation', 'gender']).age.mean()\n","\n","6.\n","# crea un dataframe y aplica \"count\" al genero\n","gender_ocup = users.groupby(['occupation', 'gender']).agg({'gender': 'count'})\n","\n","# crea un dataframe y aplica \"count\" para cada ocupacion\n","occup_count = users.groupby(['occupation']).agg('count')\n","\n","# divida gender_ocup por occup_count y multiplique por 100\n","occup_gender = gender_ocup.div(occup_count, level = \"occupation\") * 100\n","\n","# mostrar todas las filas de la columna genero\n","occup_gender.loc[: , 'gender']\n","\n","-->"]}]}